// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetRecryptAccountRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetRecryptAccountRequest) Reset()         { *m = QueryGetRecryptAccountRequest{} }
func (m *QueryGetRecryptAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecryptAccountRequest) ProtoMessage()    {}
func (*QueryGetRecryptAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e8535c98d6a78f2, []int{0}
}
func (m *QueryGetRecryptAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecryptAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecryptAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecryptAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecryptAccountRequest.Merge(m, src)
}
func (m *QueryGetRecryptAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecryptAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecryptAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecryptAccountRequest proto.InternalMessageInfo

func (m *QueryGetRecryptAccountRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetRecryptAccountResponse struct {
	RecryptAccount *RecryptAccount `protobuf:"bytes,1,opt,name=RecryptAccount,proto3" json:"RecryptAccount,omitempty"`
}

func (m *QueryGetRecryptAccountResponse) Reset()         { *m = QueryGetRecryptAccountResponse{} }
func (m *QueryGetRecryptAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecryptAccountResponse) ProtoMessage()    {}
func (*QueryGetRecryptAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e8535c98d6a78f2, []int{1}
}
func (m *QueryGetRecryptAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecryptAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecryptAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecryptAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecryptAccountResponse.Merge(m, src)
}
func (m *QueryGetRecryptAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecryptAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecryptAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecryptAccountResponse proto.InternalMessageInfo

func (m *QueryGetRecryptAccountResponse) GetRecryptAccount() *RecryptAccount {
	if m != nil {
		return m.RecryptAccount
	}
	return nil
}

type QueryAllRecryptAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRecryptAccountRequest) Reset()         { *m = QueryAllRecryptAccountRequest{} }
func (m *QueryAllRecryptAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRecryptAccountRequest) ProtoMessage()    {}
func (*QueryAllRecryptAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e8535c98d6a78f2, []int{2}
}
func (m *QueryAllRecryptAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRecryptAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRecryptAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRecryptAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRecryptAccountRequest.Merge(m, src)
}
func (m *QueryAllRecryptAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRecryptAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRecryptAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRecryptAccountRequest proto.InternalMessageInfo

func (m *QueryAllRecryptAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRecryptAccountResponse struct {
	RecryptAccount []*RecryptAccount   `protobuf:"bytes,1,rep,name=RecryptAccount,proto3" json:"RecryptAccount,omitempty"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRecryptAccountResponse) Reset()         { *m = QueryAllRecryptAccountResponse{} }
func (m *QueryAllRecryptAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRecryptAccountResponse) ProtoMessage()    {}
func (*QueryAllRecryptAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e8535c98d6a78f2, []int{3}
}
func (m *QueryAllRecryptAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRecryptAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRecryptAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRecryptAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRecryptAccountResponse.Merge(m, src)
}
func (m *QueryAllRecryptAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRecryptAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRecryptAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRecryptAccountResponse proto.InternalMessageInfo

func (m *QueryAllRecryptAccountResponse) GetRecryptAccount() []*RecryptAccount {
	if m != nil {
		return m.RecryptAccount
	}
	return nil
}

func (m *QueryAllRecryptAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetShareEncryptStorageRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetShareEncryptStorageRequest) Reset()         { *m = QueryGetShareEncryptStorageRequest{} }
func (m *QueryGetShareEncryptStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetShareEncryptStorageRequest) ProtoMessage()    {}
func (*QueryGetShareEncryptStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e8535c98d6a78f2, []int{4}
}
func (m *QueryGetShareEncryptStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetShareEncryptStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetShareEncryptStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetShareEncryptStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetShareEncryptStorageRequest.Merge(m, src)
}
func (m *QueryGetShareEncryptStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetShareEncryptStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetShareEncryptStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetShareEncryptStorageRequest proto.InternalMessageInfo

func (m *QueryGetShareEncryptStorageRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetShareEncryptStorageResponse struct {
	ShareEncryptStorage *ShareEncryptStorage `protobuf:"bytes,1,opt,name=ShareEncryptStorage,proto3" json:"ShareEncryptStorage,omitempty"`
}

func (m *QueryGetShareEncryptStorageResponse) Reset()         { *m = QueryGetShareEncryptStorageResponse{} }
func (m *QueryGetShareEncryptStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetShareEncryptStorageResponse) ProtoMessage()    {}
func (*QueryGetShareEncryptStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e8535c98d6a78f2, []int{5}
}
func (m *QueryGetShareEncryptStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetShareEncryptStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetShareEncryptStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetShareEncryptStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetShareEncryptStorageResponse.Merge(m, src)
}
func (m *QueryGetShareEncryptStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetShareEncryptStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetShareEncryptStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetShareEncryptStorageResponse proto.InternalMessageInfo

func (m *QueryGetShareEncryptStorageResponse) GetShareEncryptStorage() *ShareEncryptStorage {
	if m != nil {
		return m.ShareEncryptStorage
	}
	return nil
}

type QueryAllShareEncryptStorageRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllShareEncryptStorageRequest) Reset()         { *m = QueryAllShareEncryptStorageRequest{} }
func (m *QueryAllShareEncryptStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllShareEncryptStorageRequest) ProtoMessage()    {}
func (*QueryAllShareEncryptStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e8535c98d6a78f2, []int{6}
}
func (m *QueryAllShareEncryptStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllShareEncryptStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllShareEncryptStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllShareEncryptStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllShareEncryptStorageRequest.Merge(m, src)
}
func (m *QueryAllShareEncryptStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllShareEncryptStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllShareEncryptStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllShareEncryptStorageRequest proto.InternalMessageInfo

func (m *QueryAllShareEncryptStorageRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllShareEncryptStorageResponse struct {
	ShareEncryptStorage []*ShareEncryptStorage `protobuf:"bytes,1,rep,name=ShareEncryptStorage,proto3" json:"ShareEncryptStorage,omitempty"`
	Pagination          *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllShareEncryptStorageResponse) Reset()         { *m = QueryAllShareEncryptStorageResponse{} }
func (m *QueryAllShareEncryptStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllShareEncryptStorageResponse) ProtoMessage()    {}
func (*QueryAllShareEncryptStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e8535c98d6a78f2, []int{7}
}
func (m *QueryAllShareEncryptStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllShareEncryptStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllShareEncryptStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllShareEncryptStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllShareEncryptStorageResponse.Merge(m, src)
}
func (m *QueryAllShareEncryptStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllShareEncryptStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllShareEncryptStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllShareEncryptStorageResponse proto.InternalMessageInfo

func (m *QueryAllShareEncryptStorageResponse) GetShareEncryptStorage() []*ShareEncryptStorage {
	if m != nil {
		return m.ShareEncryptStorage
	}
	return nil
}

func (m *QueryAllShareEncryptStorageResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEncryptStorageRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetEncryptStorageRequest) Reset()         { *m = QueryGetEncryptStorageRequest{} }
func (m *QueryGetEncryptStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncryptStorageRequest) ProtoMessage()    {}
func (*QueryGetEncryptStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e8535c98d6a78f2, []int{8}
}
func (m *QueryGetEncryptStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncryptStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncryptStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncryptStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncryptStorageRequest.Merge(m, src)
}
func (m *QueryGetEncryptStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncryptStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncryptStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncryptStorageRequest proto.InternalMessageInfo

func (m *QueryGetEncryptStorageRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetEncryptStorageResponse struct {
	EncryptStorage *EncryptStorage `protobuf:"bytes,1,opt,name=EncryptStorage,proto3" json:"EncryptStorage,omitempty"`
}

func (m *QueryGetEncryptStorageResponse) Reset()         { *m = QueryGetEncryptStorageResponse{} }
func (m *QueryGetEncryptStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncryptStorageResponse) ProtoMessage()    {}
func (*QueryGetEncryptStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e8535c98d6a78f2, []int{9}
}
func (m *QueryGetEncryptStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncryptStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncryptStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncryptStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncryptStorageResponse.Merge(m, src)
}
func (m *QueryGetEncryptStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncryptStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncryptStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncryptStorageResponse proto.InternalMessageInfo

func (m *QueryGetEncryptStorageResponse) GetEncryptStorage() *EncryptStorage {
	if m != nil {
		return m.EncryptStorage
	}
	return nil
}

type QueryAllEncryptStorageRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEncryptStorageRequest) Reset()         { *m = QueryAllEncryptStorageRequest{} }
func (m *QueryAllEncryptStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEncryptStorageRequest) ProtoMessage()    {}
func (*QueryAllEncryptStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e8535c98d6a78f2, []int{10}
}
func (m *QueryAllEncryptStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEncryptStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEncryptStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEncryptStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEncryptStorageRequest.Merge(m, src)
}
func (m *QueryAllEncryptStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEncryptStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEncryptStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEncryptStorageRequest proto.InternalMessageInfo

func (m *QueryAllEncryptStorageRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEncryptStorageResponse struct {
	EncryptStorage []*EncryptStorage   `protobuf:"bytes,1,rep,name=EncryptStorage,proto3" json:"EncryptStorage,omitempty"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEncryptStorageResponse) Reset()         { *m = QueryAllEncryptStorageResponse{} }
func (m *QueryAllEncryptStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEncryptStorageResponse) ProtoMessage()    {}
func (*QueryAllEncryptStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e8535c98d6a78f2, []int{11}
}
func (m *QueryAllEncryptStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEncryptStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEncryptStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEncryptStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEncryptStorageResponse.Merge(m, src)
}
func (m *QueryAllEncryptStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEncryptStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEncryptStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEncryptStorageResponse proto.InternalMessageInfo

func (m *QueryAllEncryptStorageResponse) GetEncryptStorage() []*EncryptStorage {
	if m != nil {
		return m.EncryptStorage
	}
	return nil
}

func (m *QueryAllEncryptStorageResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetRecryptAccountRequest)(nil), "liubaninc.m0.storage.QueryGetRecryptAccountRequest")
	proto.RegisterType((*QueryGetRecryptAccountResponse)(nil), "liubaninc.m0.storage.QueryGetRecryptAccountResponse")
	proto.RegisterType((*QueryAllRecryptAccountRequest)(nil), "liubaninc.m0.storage.QueryAllRecryptAccountRequest")
	proto.RegisterType((*QueryAllRecryptAccountResponse)(nil), "liubaninc.m0.storage.QueryAllRecryptAccountResponse")
	proto.RegisterType((*QueryGetShareEncryptStorageRequest)(nil), "liubaninc.m0.storage.QueryGetShareEncryptStorageRequest")
	proto.RegisterType((*QueryGetShareEncryptStorageResponse)(nil), "liubaninc.m0.storage.QueryGetShareEncryptStorageResponse")
	proto.RegisterType((*QueryAllShareEncryptStorageRequest)(nil), "liubaninc.m0.storage.QueryAllShareEncryptStorageRequest")
	proto.RegisterType((*QueryAllShareEncryptStorageResponse)(nil), "liubaninc.m0.storage.QueryAllShareEncryptStorageResponse")
	proto.RegisterType((*QueryGetEncryptStorageRequest)(nil), "liubaninc.m0.storage.QueryGetEncryptStorageRequest")
	proto.RegisterType((*QueryGetEncryptStorageResponse)(nil), "liubaninc.m0.storage.QueryGetEncryptStorageResponse")
	proto.RegisterType((*QueryAllEncryptStorageRequest)(nil), "liubaninc.m0.storage.QueryAllEncryptStorageRequest")
	proto.RegisterType((*QueryAllEncryptStorageResponse)(nil), "liubaninc.m0.storage.QueryAllEncryptStorageResponse")
}

func init() { proto.RegisterFile("storage/query.proto", fileDescriptor_4e8535c98d6a78f2) }

var fileDescriptor_4e8535c98d6a78f2 = []byte{
	// 638 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x41, 0x6b, 0x13, 0x41,
	0x18, 0xcd, 0x34, 0x54, 0x74, 0x84, 0x82, 0xd3, 0x22, 0x12, 0xec, 0x22, 0xdb, 0xd2, 0x5a, 0x2d,
	0xb3, 0x4d, 0x13, 0xa1, 0xf5, 0x16, 0x41, 0x7b, 0xe9, 0x41, 0xd3, 0x9b, 0x1e, 0xca, 0x64, 0x1d,
	0xb6, 0x0b, 0x9b, 0x99, 0xed, 0xce, 0x44, 0x1a, 0xc4, 0x4b, 0x7f, 0x81, 0xe0, 0xdf, 0xf0, 0xe2,
	0xc9, 0xab, 0x17, 0x41, 0xf0, 0x52, 0xf0, 0xd2, 0xa3, 0x24, 0xfe, 0x10, 0xc9, 0xce, 0x24, 0x66,
	0xb7, 0xb3, 0x9b, 0x6c, 0x4c, 0x8f, 0xdd, 0x99, 0xf7, 0xbe, 0xf7, 0xde, 0xf7, 0xcd, 0xd7, 0xc0,
	0x65, 0x21, 0x79, 0x44, 0x3c, 0xea, 0x9c, 0x76, 0x68, 0xd4, 0xc5, 0x61, 0xc4, 0x25, 0x47, 0x2b,
	0x81, 0xdf, 0x69, 0x11, 0xe6, 0x33, 0x17, 0xb7, 0x77, 0xb0, 0xbe, 0x51, 0xb9, 0xef, 0x71, 0xee,
	0x05, 0xd4, 0x21, 0xa1, 0xef, 0x10, 0xc6, 0xb8, 0x24, 0xd2, 0xe7, 0x4c, 0x28, 0x4c, 0xe5, 0x91,
	0xcb, 0x45, 0x9b, 0x0b, 0xa7, 0x45, 0x84, 0x26, 0x73, 0xde, 0x55, 0x5b, 0x54, 0x92, 0xaa, 0x13,
	0x12, 0xcf, 0x67, 0xf1, 0x65, 0x7d, 0x77, 0x75, 0x58, 0x34, 0xa2, 0x6e, 0xd4, 0x0d, 0xe5, 0x31,
	0x71, 0x5d, 0xde, 0x61, 0x52, 0x1f, 0xaf, 0x0d, 0x8f, 0xc5, 0x09, 0x89, 0xe8, 0x31, 0x65, 0xea,
	0x92, 0xfe, 0x9a, 0xe6, 0x30, 0x1e, 0xdb, 0x4f, 0xe0, 0xea, 0xab, 0x81, 0x88, 0x03, 0x2a, 0x9b,
	0xaa, 0x48, 0x43, 0xd5, 0x68, 0xd2, 0xd3, 0x0e, 0x15, 0x12, 0xad, 0xc0, 0x45, 0x9f, 0xbd, 0xa5,
	0x67, 0xf7, 0xc0, 0x03, 0xf0, 0xf0, 0x56, 0x53, 0xfd, 0x61, 0x33, 0x68, 0x65, 0xc1, 0x44, 0xc8,
	0x99, 0xa0, 0xe8, 0x10, 0x2e, 0x25, 0x4f, 0x62, 0x82, 0xdb, 0xbb, 0xeb, 0xd8, 0x14, 0x1a, 0x4e,
	0xb1, 0xa4, 0xb0, 0xb6, 0xa7, 0x65, 0x36, 0x82, 0xc0, 0x2c, 0xf3, 0x05, 0x84, 0xff, 0xe2, 0xd3,
	0xa5, 0x36, 0xb0, 0xca, 0x1a, 0x0f, 0xb2, 0xc6, 0xaa, 0x71, 0x3a, 0x6b, 0xfc, 0x92, 0x78, 0x54,
	0x63, 0x9b, 0x63, 0x48, 0xfb, 0x2b, 0xd0, 0xce, 0x0c, 0x95, 0x72, 0x9c, 0x95, 0x67, 0x75, 0x86,
	0x0e, 0x12, 0xc2, 0x17, 0x62, 0xe1, 0x9b, 0x13, 0x85, 0x2b, 0x29, 0x09, 0xe5, 0x4f, 0xa1, 0x3d,
	0x6c, 0xc9, 0xd1, 0x60, 0x1e, 0x9e, 0xab, 0x7e, 0x1f, 0x29, 0x19, 0xf9, 0xed, 0x3c, 0x07, 0x70,
	0x2d, 0x17, 0xac, 0xad, 0xbf, 0x81, 0xcb, 0x86, 0x63, 0x1d, 0xf7, 0x96, 0xd9, 0xbf, 0x89, 0xcf,
	0xc4, 0x62, 0x07, 0xda, 0x40, 0x23, 0x08, 0x72, 0x0c, 0xcc, 0xab, 0xd1, 0x3f, 0x87, 0x96, 0xb3,
	0xca, 0x4d, 0xb2, 0x5c, 0xfe, 0x7f, 0xcb, 0xf3, 0x6b, 0xfe, 0xd8, 0x33, 0x2e, 0xd2, 0xf7, 0xb1,
	0x67, 0x9c, 0x61, 0xff, 0x10, 0x2e, 0x19, 0x9b, 0x9d, 0x31, 0xec, 0x29, 0x96, 0x14, 0x76, 0xfc,
	0x19, 0x5f, 0x6f, 0x77, 0xc7, 0x9f, 0x71, 0x01, 0x67, 0xe5, 0x59, 0x9d, 0xcd, 0xad, 0x93, 0xbb,
	0x97, 0x37, 0xe1, 0x62, 0xac, 0x1c, 0x7d, 0x01, 0xe9, 0x45, 0x83, 0x6a, 0x66, 0x6d, 0xb9, 0x1b,
	0xbc, 0x52, 0x2f, 0x06, 0x52, 0x9a, 0xec, 0xfa, 0xf9, 0xaf, 0x3f, 0x9f, 0x16, 0x30, 0xda, 0x76,
	0x46, 0x68, 0xa7, 0xbd, 0xe3, 0xa4, 0xfe, 0x23, 0x69, 0x94, 0xf3, 0x3e, 0x9e, 0xa7, 0x0f, 0xe8,
	0x33, 0x80, 0x77, 0x92, 0x84, 0x8d, 0x20, 0xc8, 0x95, 0x9d, 0xb5, 0xd1, 0x73, 0x65, 0x67, 0x2e,
	0x67, 0x7b, 0x3b, 0x96, 0xbd, 0x81, 0xd6, 0xa7, 0x91, 0x8d, 0xbe, 0x03, 0xe3, 0xeb, 0x46, 0x7b,
	0xf9, 0x91, 0x65, 0xaf, 0xa7, 0xca, 0xfe, 0x0c, 0x48, 0x2d, 0x7d, 0x3f, 0x96, 0x5e, 0x43, 0x55,
	0xb3, 0x74, 0x71, 0x15, 0x3a, 0x8a, 0xfd, 0x1b, 0x80, 0x77, 0x0d, 0xd4, 0x83, 0xec, 0xf7, 0xf2,
	0x63, 0x9c, 0xd1, 0x4a, 0xfe, 0xd2, 0xb4, 0xab, 0xb1, 0x95, 0xc7, 0x68, 0x6b, 0x6a, 0x2b, 0xf1,
	0xb4, 0xa7, 0x3e, 0x4d, 0x98, 0x76, 0xb3, 0xea, 0x7a, 0x31, 0xd0, 0x74, 0xd3, 0x4e, 0xcd, 0xb1,
	0x0f, 0xa6, 0xfd, 0x6a, 0xe2, 0x13, 0xa6, 0xbd, 0xb8, 0xec, 0xcc, 0x1d, 0x36, 0x69, 0xda, 0x93,
	0xb2, 0x9f, 0x35, 0x7e, 0xf4, 0x2c, 0x70, 0xd1, 0xb3, 0xc0, 0xef, 0x9e, 0x05, 0x3e, 0xf6, 0xad,
	0xd2, 0x45, 0xdf, 0x2a, 0x5d, 0xf6, 0xad, 0xd2, 0xeb, 0x4d, 0xcf, 0x97, 0x27, 0x9d, 0x16, 0x76,
	0x79, 0x3b, 0xc9, 0x74, 0x36, 0xe2, 0x92, 0xdd, 0x90, 0x8a, 0xd6, 0x8d, 0xf8, 0x57, 0x63, 0xed,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x0d, 0xfb, 0xd3, 0x0f, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a recryptAccount by index.
	RecryptAccount(ctx context.Context, in *QueryGetRecryptAccountRequest, opts ...grpc.CallOption) (*QueryGetRecryptAccountResponse, error)
	// Queries a list of recryptAccount items.
	RecryptAccountAll(ctx context.Context, in *QueryAllRecryptAccountRequest, opts ...grpc.CallOption) (*QueryAllRecryptAccountResponse, error)
	// Queries a shareEncryptStorage by index.
	ShareEncryptStorage(ctx context.Context, in *QueryGetShareEncryptStorageRequest, opts ...grpc.CallOption) (*QueryGetShareEncryptStorageResponse, error)
	// Queries a list of shareEncryptStorage items.
	ShareEncryptStorageAll(ctx context.Context, in *QueryAllShareEncryptStorageRequest, opts ...grpc.CallOption) (*QueryAllShareEncryptStorageResponse, error)
	// Queries a encryptStorage by index.
	EncryptStorage(ctx context.Context, in *QueryGetEncryptStorageRequest, opts ...grpc.CallOption) (*QueryGetEncryptStorageResponse, error)
	// Queries a list of encryptStorage items.
	EncryptStorageAll(ctx context.Context, in *QueryAllEncryptStorageRequest, opts ...grpc.CallOption) (*QueryAllEncryptStorageResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) RecryptAccount(ctx context.Context, in *QueryGetRecryptAccountRequest, opts ...grpc.CallOption) (*QueryGetRecryptAccountResponse, error) {
	out := new(QueryGetRecryptAccountResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.storage.Query/RecryptAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecryptAccountAll(ctx context.Context, in *QueryAllRecryptAccountRequest, opts ...grpc.CallOption) (*QueryAllRecryptAccountResponse, error) {
	out := new(QueryAllRecryptAccountResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.storage.Query/RecryptAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShareEncryptStorage(ctx context.Context, in *QueryGetShareEncryptStorageRequest, opts ...grpc.CallOption) (*QueryGetShareEncryptStorageResponse, error) {
	out := new(QueryGetShareEncryptStorageResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.storage.Query/ShareEncryptStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShareEncryptStorageAll(ctx context.Context, in *QueryAllShareEncryptStorageRequest, opts ...grpc.CallOption) (*QueryAllShareEncryptStorageResponse, error) {
	out := new(QueryAllShareEncryptStorageResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.storage.Query/ShareEncryptStorageAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptStorage(ctx context.Context, in *QueryGetEncryptStorageRequest, opts ...grpc.CallOption) (*QueryGetEncryptStorageResponse, error) {
	out := new(QueryGetEncryptStorageResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.storage.Query/EncryptStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptStorageAll(ctx context.Context, in *QueryAllEncryptStorageRequest, opts ...grpc.CallOption) (*QueryAllEncryptStorageResponse, error) {
	out := new(QueryAllEncryptStorageResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.storage.Query/EncryptStorageAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a recryptAccount by index.
	RecryptAccount(context.Context, *QueryGetRecryptAccountRequest) (*QueryGetRecryptAccountResponse, error)
	// Queries a list of recryptAccount items.
	RecryptAccountAll(context.Context, *QueryAllRecryptAccountRequest) (*QueryAllRecryptAccountResponse, error)
	// Queries a shareEncryptStorage by index.
	ShareEncryptStorage(context.Context, *QueryGetShareEncryptStorageRequest) (*QueryGetShareEncryptStorageResponse, error)
	// Queries a list of shareEncryptStorage items.
	ShareEncryptStorageAll(context.Context, *QueryAllShareEncryptStorageRequest) (*QueryAllShareEncryptStorageResponse, error)
	// Queries a encryptStorage by index.
	EncryptStorage(context.Context, *QueryGetEncryptStorageRequest) (*QueryGetEncryptStorageResponse, error)
	// Queries a list of encryptStorage items.
	EncryptStorageAll(context.Context, *QueryAllEncryptStorageRequest) (*QueryAllEncryptStorageResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) RecryptAccount(ctx context.Context, req *QueryGetRecryptAccountRequest) (*QueryGetRecryptAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecryptAccount not implemented")
}
func (*UnimplementedQueryServer) RecryptAccountAll(ctx context.Context, req *QueryAllRecryptAccountRequest) (*QueryAllRecryptAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecryptAccountAll not implemented")
}
func (*UnimplementedQueryServer) ShareEncryptStorage(ctx context.Context, req *QueryGetShareEncryptStorageRequest) (*QueryGetShareEncryptStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareEncryptStorage not implemented")
}
func (*UnimplementedQueryServer) ShareEncryptStorageAll(ctx context.Context, req *QueryAllShareEncryptStorageRequest) (*QueryAllShareEncryptStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareEncryptStorageAll not implemented")
}
func (*UnimplementedQueryServer) EncryptStorage(ctx context.Context, req *QueryGetEncryptStorageRequest) (*QueryGetEncryptStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptStorage not implemented")
}
func (*UnimplementedQueryServer) EncryptStorageAll(ctx context.Context, req *QueryAllEncryptStorageRequest) (*QueryAllEncryptStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptStorageAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_RecryptAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecryptAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecryptAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.storage.Query/RecryptAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecryptAccount(ctx, req.(*QueryGetRecryptAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecryptAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRecryptAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecryptAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.storage.Query/RecryptAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecryptAccountAll(ctx, req.(*QueryAllRecryptAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShareEncryptStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetShareEncryptStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShareEncryptStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.storage.Query/ShareEncryptStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShareEncryptStorage(ctx, req.(*QueryGetShareEncryptStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShareEncryptStorageAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllShareEncryptStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShareEncryptStorageAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.storage.Query/ShareEncryptStorageAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShareEncryptStorageAll(ctx, req.(*QueryAllShareEncryptStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEncryptStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.storage.Query/EncryptStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptStorage(ctx, req.(*QueryGetEncryptStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptStorageAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEncryptStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptStorageAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.storage.Query/EncryptStorageAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptStorageAll(ctx, req.(*QueryAllEncryptStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "liubaninc.m0.storage.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecryptAccount",
			Handler:    _Query_RecryptAccount_Handler,
		},
		{
			MethodName: "RecryptAccountAll",
			Handler:    _Query_RecryptAccountAll_Handler,
		},
		{
			MethodName: "ShareEncryptStorage",
			Handler:    _Query_ShareEncryptStorage_Handler,
		},
		{
			MethodName: "ShareEncryptStorageAll",
			Handler:    _Query_ShareEncryptStorageAll_Handler,
		},
		{
			MethodName: "EncryptStorage",
			Handler:    _Query_EncryptStorage_Handler,
		},
		{
			MethodName: "EncryptStorageAll",
			Handler:    _Query_EncryptStorageAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage/query.proto",
}

func (m *QueryGetRecryptAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecryptAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecryptAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecryptAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecryptAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecryptAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecryptAccount != nil {
		{
			size, err := m.RecryptAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRecryptAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRecryptAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRecryptAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRecryptAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRecryptAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRecryptAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecryptAccount) > 0 {
		for iNdEx := len(m.RecryptAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecryptAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetShareEncryptStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetShareEncryptStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetShareEncryptStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetShareEncryptStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetShareEncryptStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetShareEncryptStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShareEncryptStorage != nil {
		{
			size, err := m.ShareEncryptStorage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllShareEncryptStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllShareEncryptStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllShareEncryptStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllShareEncryptStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllShareEncryptStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllShareEncryptStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShareEncryptStorage) > 0 {
		for iNdEx := len(m.ShareEncryptStorage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShareEncryptStorage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncryptStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncryptStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncryptStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncryptStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncryptStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncryptStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncryptStorage != nil {
		{
			size, err := m.EncryptStorage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEncryptStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEncryptStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEncryptStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEncryptStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEncryptStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEncryptStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptStorage) > 0 {
		for iNdEx := len(m.EncryptStorage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptStorage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetRecryptAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecryptAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecryptAccount != nil {
		l = m.RecryptAccount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRecryptAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRecryptAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecryptAccount) > 0 {
		for _, e := range m.RecryptAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetShareEncryptStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetShareEncryptStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShareEncryptStorage != nil {
		l = m.ShareEncryptStorage.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllShareEncryptStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllShareEncryptStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShareEncryptStorage) > 0 {
		for _, e := range m.ShareEncryptStorage {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncryptStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncryptStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncryptStorage != nil {
		l = m.EncryptStorage.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEncryptStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEncryptStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncryptStorage) > 0 {
		for _, e := range m.EncryptStorage {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetRecryptAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecryptAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecryptAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecryptAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecryptAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecryptAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecryptAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecryptAccount == nil {
				m.RecryptAccount = &RecryptAccount{}
			}
			if err := m.RecryptAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRecryptAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRecryptAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRecryptAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRecryptAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRecryptAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRecryptAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecryptAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecryptAccount = append(m.RecryptAccount, &RecryptAccount{})
			if err := m.RecryptAccount[len(m.RecryptAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetShareEncryptStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetShareEncryptStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetShareEncryptStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetShareEncryptStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetShareEncryptStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetShareEncryptStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareEncryptStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareEncryptStorage == nil {
				m.ShareEncryptStorage = &ShareEncryptStorage{}
			}
			if err := m.ShareEncryptStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllShareEncryptStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllShareEncryptStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllShareEncryptStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllShareEncryptStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllShareEncryptStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllShareEncryptStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareEncryptStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareEncryptStorage = append(m.ShareEncryptStorage, &ShareEncryptStorage{})
			if err := m.ShareEncryptStorage[len(m.ShareEncryptStorage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncryptStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncryptStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncryptStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncryptStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncryptStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncryptStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptStorage == nil {
				m.EncryptStorage = &EncryptStorage{}
			}
			if err := m.EncryptStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEncryptStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEncryptStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEncryptStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEncryptStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEncryptStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEncryptStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptStorage = append(m.EncryptStorage, &EncryptStorage{})
			if err := m.EncryptStorage[len(m.EncryptStorage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
