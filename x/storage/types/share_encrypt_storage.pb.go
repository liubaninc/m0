// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/share_encrypt_storage.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ShareEncryptStorage struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index      string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	ShareIndex string `protobuf:"bytes,3,opt,name=shareIndex,proto3" json:"shareIndex,omitempty"`
	Envelope   string `protobuf:"bytes,4,opt,name=envelope,proto3" json:"envelope,omitempty"`
	Sharer     string `protobuf:"bytes,5,opt,name=sharer,proto3" json:"sharer,omitempty"`
}

func (m *ShareEncryptStorage) Reset()         { *m = ShareEncryptStorage{} }
func (m *ShareEncryptStorage) String() string { return proto.CompactTextString(m) }
func (*ShareEncryptStorage) ProtoMessage()    {}
func (*ShareEncryptStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1591c5b370ea6812, []int{0}
}
func (m *ShareEncryptStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareEncryptStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareEncryptStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareEncryptStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareEncryptStorage.Merge(m, src)
}
func (m *ShareEncryptStorage) XXX_Size() int {
	return m.Size()
}
func (m *ShareEncryptStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareEncryptStorage.DiscardUnknown(m)
}

var xxx_messageInfo_ShareEncryptStorage proto.InternalMessageInfo

func (m *ShareEncryptStorage) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ShareEncryptStorage) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ShareEncryptStorage) GetShareIndex() string {
	if m != nil {
		return m.ShareIndex
	}
	return ""
}

func (m *ShareEncryptStorage) GetEnvelope() string {
	if m != nil {
		return m.Envelope
	}
	return ""
}

func (m *ShareEncryptStorage) GetSharer() string {
	if m != nil {
		return m.Sharer
	}
	return ""
}

func init() {
	proto.RegisterType((*ShareEncryptStorage)(nil), "liubaninc.m0.storage.ShareEncryptStorage")
}

func init() {
	proto.RegisterFile("storage/share_encrypt_storage.proto", fileDescriptor_1591c5b370ea6812)
}

var fileDescriptor_1591c5b370ea6812 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2e, 0x2e, 0xc9, 0x2f,
	0x4a, 0x4c, 0x4f, 0xd5, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x8d, 0x4f, 0xcd, 0x4b, 0x2e, 0xaa, 0x2c,
	0x28, 0x89, 0x87, 0x8a, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x89, 0xe4, 0x64, 0x96, 0x26,
	0x25, 0xe6, 0x65, 0xe6, 0x25, 0xeb, 0xe5, 0x1a, 0xe8, 0x41, 0xe5, 0xa4, 0x44, 0xd2, 0xf3, 0xd3,
	0xf3, 0xc1, 0x0a, 0xf4, 0x41, 0x2c, 0x88, 0x5a, 0xa5, 0x99, 0x8c, 0x5c, 0xc2, 0xc1, 0x20, 0xb3,
	0x5c, 0x21, 0x46, 0x05, 0x43, 0x54, 0x0b, 0x49, 0x70, 0xb1, 0x27, 0x17, 0xa5, 0x26, 0x96, 0xe4,
	0x17, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x42, 0x22, 0x5c, 0xac, 0x99, 0x79,
	0x29, 0xa9, 0x15, 0x12, 0x4c, 0x60, 0x71, 0x08, 0x47, 0x48, 0x8e, 0x8b, 0x0b, 0xec, 0x24, 0x4f,
	0xb0, 0x14, 0x33, 0x58, 0x0a, 0x49, 0x44, 0x48, 0x8a, 0x8b, 0x23, 0x35, 0xaf, 0x2c, 0x35, 0x27,
	0xbf, 0x20, 0x55, 0x82, 0x05, 0x2c, 0x0b, 0xe7, 0x0b, 0x89, 0x71, 0xb1, 0x81, 0x55, 0x16, 0x49,
	0xb0, 0x82, 0x65, 0xa0, 0x3c, 0x27, 0xc7, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63,
	0x88, 0x52, 0x4f, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x87, 0x7b, 0x56,
	0x3f, 0xd7, 0x40, 0xbf, 0x42, 0x1f, 0x16, 0x40, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60,
	0x5f, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x93, 0x27, 0xf7, 0x06, 0x38, 0x01, 0x00, 0x00,
}

func (m *ShareEncryptStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareEncryptStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareEncryptStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sharer) > 0 {
		i -= len(m.Sharer)
		copy(dAtA[i:], m.Sharer)
		i = encodeVarintShareEncryptStorage(dAtA, i, uint64(len(m.Sharer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Envelope) > 0 {
		i -= len(m.Envelope)
		copy(dAtA[i:], m.Envelope)
		i = encodeVarintShareEncryptStorage(dAtA, i, uint64(len(m.Envelope)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ShareIndex) > 0 {
		i -= len(m.ShareIndex)
		copy(dAtA[i:], m.ShareIndex)
		i = encodeVarintShareEncryptStorage(dAtA, i, uint64(len(m.ShareIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintShareEncryptStorage(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintShareEncryptStorage(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintShareEncryptStorage(dAtA []byte, offset int, v uint64) int {
	offset -= sovShareEncryptStorage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ShareEncryptStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovShareEncryptStorage(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovShareEncryptStorage(uint64(l))
	}
	l = len(m.ShareIndex)
	if l > 0 {
		n += 1 + l + sovShareEncryptStorage(uint64(l))
	}
	l = len(m.Envelope)
	if l > 0 {
		n += 1 + l + sovShareEncryptStorage(uint64(l))
	}
	l = len(m.Sharer)
	if l > 0 {
		n += 1 + l + sovShareEncryptStorage(uint64(l))
	}
	return n
}

func sovShareEncryptStorage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShareEncryptStorage(x uint64) (n int) {
	return sovShareEncryptStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShareEncryptStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShareEncryptStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareEncryptStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareEncryptStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShareEncryptStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShareEncryptStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShareEncryptStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShareEncryptStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShareEncryptStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShareEncryptStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShareEncryptStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShareEncryptStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShareEncryptStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envelope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShareEncryptStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShareEncryptStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShareEncryptStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Envelope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShareEncryptStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShareEncryptStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShareEncryptStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sharer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShareEncryptStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShareEncryptStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShareEncryptStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShareEncryptStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShareEncryptStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShareEncryptStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShareEncryptStorage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShareEncryptStorage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShareEncryptStorage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShareEncryptStorage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShareEncryptStorage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShareEncryptStorage = fmt.Errorf("proto: unexpected end of group")
)
