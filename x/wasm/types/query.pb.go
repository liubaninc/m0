// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wasm/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/liubaninc/m0/x/utxo/types"
	xmodel "github.com/liubaninc/m0/x/wasm/xmodel"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetApproveDeployRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetApproveDeployRequest) Reset()         { *m = QueryGetApproveDeployRequest{} }
func (m *QueryGetApproveDeployRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetApproveDeployRequest) ProtoMessage()    {}
func (*QueryGetApproveDeployRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{0}
}
func (m *QueryGetApproveDeployRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApproveDeployRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApproveDeployRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApproveDeployRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApproveDeployRequest.Merge(m, src)
}
func (m *QueryGetApproveDeployRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApproveDeployRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApproveDeployRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApproveDeployRequest proto.InternalMessageInfo

func (m *QueryGetApproveDeployRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetApproveDeployResponse struct {
	ApproveDeploy *ApproveDeploy `protobuf:"bytes,1,opt,name=ApproveDeploy,proto3" json:"ApproveDeploy,omitempty"`
}

func (m *QueryGetApproveDeployResponse) Reset()         { *m = QueryGetApproveDeployResponse{} }
func (m *QueryGetApproveDeployResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetApproveDeployResponse) ProtoMessage()    {}
func (*QueryGetApproveDeployResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{1}
}
func (m *QueryGetApproveDeployResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApproveDeployResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApproveDeployResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApproveDeployResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApproveDeployResponse.Merge(m, src)
}
func (m *QueryGetApproveDeployResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApproveDeployResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApproveDeployResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApproveDeployResponse proto.InternalMessageInfo

func (m *QueryGetApproveDeployResponse) GetApproveDeploy() *ApproveDeploy {
	if m != nil {
		return m.ApproveDeploy
	}
	return nil
}

type QueryAllApproveDeployRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllApproveDeployRequest) Reset()         { *m = QueryAllApproveDeployRequest{} }
func (m *QueryAllApproveDeployRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllApproveDeployRequest) ProtoMessage()    {}
func (*QueryAllApproveDeployRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{2}
}
func (m *QueryAllApproveDeployRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllApproveDeployRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllApproveDeployRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllApproveDeployRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllApproveDeployRequest.Merge(m, src)
}
func (m *QueryAllApproveDeployRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllApproveDeployRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllApproveDeployRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllApproveDeployRequest proto.InternalMessageInfo

func (m *QueryAllApproveDeployRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllApproveDeployResponse struct {
	ApproveDeploy []*ApproveDeploy    `protobuf:"bytes,1,rep,name=ApproveDeploy,proto3" json:"ApproveDeploy,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllApproveDeployResponse) Reset()         { *m = QueryAllApproveDeployResponse{} }
func (m *QueryAllApproveDeployResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllApproveDeployResponse) ProtoMessage()    {}
func (*QueryAllApproveDeployResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{3}
}
func (m *QueryAllApproveDeployResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllApproveDeployResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllApproveDeployResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllApproveDeployResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllApproveDeployResponse.Merge(m, src)
}
func (m *QueryAllApproveDeployResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllApproveDeployResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllApproveDeployResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllApproveDeployResponse proto.InternalMessageInfo

func (m *QueryAllApproveDeployResponse) GetApproveDeploy() []*ApproveDeploy {
	if m != nil {
		return m.ApproveDeploy
	}
	return nil
}

func (m *QueryAllApproveDeployResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProposeDeployRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetProposeDeployRequest) Reset()         { *m = QueryGetProposeDeployRequest{} }
func (m *QueryGetProposeDeployRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProposeDeployRequest) ProtoMessage()    {}
func (*QueryGetProposeDeployRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{4}
}
func (m *QueryGetProposeDeployRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProposeDeployRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProposeDeployRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProposeDeployRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProposeDeployRequest.Merge(m, src)
}
func (m *QueryGetProposeDeployRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProposeDeployRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProposeDeployRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProposeDeployRequest proto.InternalMessageInfo

func (m *QueryGetProposeDeployRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetProposeDeployResponse struct {
	ProposeDeploy *ProposeDeploy `protobuf:"bytes,1,opt,name=ProposeDeploy,proto3" json:"ProposeDeploy,omitempty"`
}

func (m *QueryGetProposeDeployResponse) Reset()         { *m = QueryGetProposeDeployResponse{} }
func (m *QueryGetProposeDeployResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProposeDeployResponse) ProtoMessage()    {}
func (*QueryGetProposeDeployResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{5}
}
func (m *QueryGetProposeDeployResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProposeDeployResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProposeDeployResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProposeDeployResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProposeDeployResponse.Merge(m, src)
}
func (m *QueryGetProposeDeployResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProposeDeployResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProposeDeployResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProposeDeployResponse proto.InternalMessageInfo

func (m *QueryGetProposeDeployResponse) GetProposeDeploy() *ProposeDeploy {
	if m != nil {
		return m.ProposeDeploy
	}
	return nil
}

type QueryAllProposeDeployRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProposeDeployRequest) Reset()         { *m = QueryAllProposeDeployRequest{} }
func (m *QueryAllProposeDeployRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProposeDeployRequest) ProtoMessage()    {}
func (*QueryAllProposeDeployRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{6}
}
func (m *QueryAllProposeDeployRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProposeDeployRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProposeDeployRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProposeDeployRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProposeDeployRequest.Merge(m, src)
}
func (m *QueryAllProposeDeployRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProposeDeployRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProposeDeployRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProposeDeployRequest proto.InternalMessageInfo

func (m *QueryAllProposeDeployRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProposeDeployResponse struct {
	ProposeDeploy []*ProposeDeploy    `protobuf:"bytes,1,rep,name=ProposeDeploy,proto3" json:"ProposeDeploy,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProposeDeployResponse) Reset()         { *m = QueryAllProposeDeployResponse{} }
func (m *QueryAllProposeDeployResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProposeDeployResponse) ProtoMessage()    {}
func (*QueryAllProposeDeployResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{7}
}
func (m *QueryAllProposeDeployResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProposeDeployResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProposeDeployResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProposeDeployResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProposeDeployResponse.Merge(m, src)
}
func (m *QueryAllProposeDeployResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProposeDeployResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProposeDeployResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProposeDeployResponse proto.InternalMessageInfo

func (m *QueryAllProposeDeployResponse) GetProposeDeploy() []*ProposeDeploy {
	if m != nil {
		return m.ProposeDeploy
	}
	return nil
}

func (m *QueryAllProposeDeployResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type InvokeRPCRequest struct {
	Creator  string           `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Lock     int64            `protobuf:"varint,2,opt,name=lock,proto3" json:"lock,omitempty"`
	Requests []*InvokeRequest `protobuf:"bytes,3,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *InvokeRPCRequest) Reset()         { *m = InvokeRPCRequest{} }
func (m *InvokeRPCRequest) String() string { return proto.CompactTextString(m) }
func (*InvokeRPCRequest) ProtoMessage()    {}
func (*InvokeRPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{8}
}
func (m *InvokeRPCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvokeRPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvokeRPCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvokeRPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvokeRPCRequest.Merge(m, src)
}
func (m *InvokeRPCRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvokeRPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvokeRPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvokeRPCRequest proto.InternalMessageInfo

func (m *InvokeRPCRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *InvokeRPCRequest) GetLock() int64 {
	if m != nil {
		return m.Lock
	}
	return 0
}

func (m *InvokeRPCRequest) GetRequests() []*InvokeRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type InvokeRPCResponse struct {
	Inputs     []*types.Input             `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs    []*types.Output            `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	InputsExt  []*InputExt                `protobuf:"bytes,3,rep,name=inputsExt,proto3" json:"inputsExt,omitempty"`
	OutputsExt []*OutputExt               `protobuf:"bytes,4,rep,name=outputsExt,proto3" json:"outputsExt,omitempty"`
	Response   [][]byte                   `protobuf:"bytes,5,rep,name=response,proto3" json:"response,omitempty"`
	GasUsed    int64                      `protobuf:"varint,6,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Requests   []*InvokeRequest           `protobuf:"bytes,7,rep,name=requests,proto3" json:"requests,omitempty"`
	Responses  []*xmodel.ContractResponse `protobuf:"bytes,8,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (m *InvokeRPCResponse) Reset()         { *m = InvokeRPCResponse{} }
func (m *InvokeRPCResponse) String() string { return proto.CompactTextString(m) }
func (*InvokeRPCResponse) ProtoMessage()    {}
func (*InvokeRPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{9}
}
func (m *InvokeRPCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvokeRPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvokeRPCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvokeRPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvokeRPCResponse.Merge(m, src)
}
func (m *InvokeRPCResponse) XXX_Size() int {
	return m.Size()
}
func (m *InvokeRPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InvokeRPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InvokeRPCResponse proto.InternalMessageInfo

func (m *InvokeRPCResponse) GetInputs() []*types.Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *InvokeRPCResponse) GetOutputs() []*types.Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *InvokeRPCResponse) GetInputsExt() []*InputExt {
	if m != nil {
		return m.InputsExt
	}
	return nil
}

func (m *InvokeRPCResponse) GetOutputsExt() []*OutputExt {
	if m != nil {
		return m.OutputsExt
	}
	return nil
}

func (m *InvokeRPCResponse) GetResponse() [][]byte {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *InvokeRPCResponse) GetGasUsed() int64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *InvokeRPCResponse) GetRequests() []*InvokeRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *InvokeRPCResponse) GetResponses() []*xmodel.ContractResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type QueryGetContractRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryGetContractRequest) Reset()         { *m = QueryGetContractRequest{} }
func (m *QueryGetContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetContractRequest) ProtoMessage()    {}
func (*QueryGetContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{10}
}
func (m *QueryGetContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContractRequest.Merge(m, src)
}
func (m *QueryGetContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContractRequest proto.InternalMessageInfo

func (m *QueryGetContractRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryGetContractResponse struct {
	Contract *Contract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (m *QueryGetContractResponse) Reset()         { *m = QueryGetContractResponse{} }
func (m *QueryGetContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetContractResponse) ProtoMessage()    {}
func (*QueryGetContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{11}
}
func (m *QueryGetContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContractResponse.Merge(m, src)
}
func (m *QueryGetContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContractResponse proto.InternalMessageInfo

func (m *QueryGetContractResponse) GetContract() *Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

type QueryGetAccountAllContractRequest struct {
	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAccountAllContractRequest) Reset()         { *m = QueryGetAccountAllContractRequest{} }
func (m *QueryGetAccountAllContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountAllContractRequest) ProtoMessage()    {}
func (*QueryGetAccountAllContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{12}
}
func (m *QueryGetAccountAllContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountAllContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountAllContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountAllContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountAllContractRequest.Merge(m, src)
}
func (m *QueryGetAccountAllContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountAllContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountAllContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountAllContractRequest proto.InternalMessageInfo

func (m *QueryGetAccountAllContractRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryGetAccountAllContractRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAccountAllContractResponse struct {
	Contract   []*Contract         `protobuf:"bytes,1,rep,name=contract,proto3" json:"contract,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAccountAllContractResponse) Reset()         { *m = QueryGetAccountAllContractResponse{} }
func (m *QueryGetAccountAllContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountAllContractResponse) ProtoMessage()    {}
func (*QueryGetAccountAllContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{13}
}
func (m *QueryGetAccountAllContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountAllContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountAllContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountAllContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountAllContractResponse.Merge(m, src)
}
func (m *QueryGetAccountAllContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountAllContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountAllContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountAllContractResponse proto.InternalMessageInfo

func (m *QueryGetAccountAllContractResponse) GetContract() []*Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *QueryGetAccountAllContractResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllContractRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractRequest) Reset()         { *m = QueryAllContractRequest{} }
func (m *QueryAllContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractRequest) ProtoMessage()    {}
func (*QueryAllContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{14}
}
func (m *QueryAllContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractRequest.Merge(m, src)
}
func (m *QueryAllContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractRequest proto.InternalMessageInfo

func (m *QueryAllContractRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllContractResponse struct {
	Contract   []*Contract         `protobuf:"bytes,1,rep,name=contract,proto3" json:"contract,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractResponse) Reset()         { *m = QueryAllContractResponse{} }
func (m *QueryAllContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractResponse) ProtoMessage()    {}
func (*QueryAllContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23bf88269acb91a9, []int{15}
}
func (m *QueryAllContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractResponse.Merge(m, src)
}
func (m *QueryAllContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractResponse proto.InternalMessageInfo

func (m *QueryAllContractResponse) GetContract() []*Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *QueryAllContractResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetApproveDeployRequest)(nil), "liubaninc.m0.wasm.QueryGetApproveDeployRequest")
	proto.RegisterType((*QueryGetApproveDeployResponse)(nil), "liubaninc.m0.wasm.QueryGetApproveDeployResponse")
	proto.RegisterType((*QueryAllApproveDeployRequest)(nil), "liubaninc.m0.wasm.QueryAllApproveDeployRequest")
	proto.RegisterType((*QueryAllApproveDeployResponse)(nil), "liubaninc.m0.wasm.QueryAllApproveDeployResponse")
	proto.RegisterType((*QueryGetProposeDeployRequest)(nil), "liubaninc.m0.wasm.QueryGetProposeDeployRequest")
	proto.RegisterType((*QueryGetProposeDeployResponse)(nil), "liubaninc.m0.wasm.QueryGetProposeDeployResponse")
	proto.RegisterType((*QueryAllProposeDeployRequest)(nil), "liubaninc.m0.wasm.QueryAllProposeDeployRequest")
	proto.RegisterType((*QueryAllProposeDeployResponse)(nil), "liubaninc.m0.wasm.QueryAllProposeDeployResponse")
	proto.RegisterType((*InvokeRPCRequest)(nil), "liubaninc.m0.wasm.InvokeRPCRequest")
	proto.RegisterType((*InvokeRPCResponse)(nil), "liubaninc.m0.wasm.InvokeRPCResponse")
	proto.RegisterType((*QueryGetContractRequest)(nil), "liubaninc.m0.wasm.QueryGetContractRequest")
	proto.RegisterType((*QueryGetContractResponse)(nil), "liubaninc.m0.wasm.QueryGetContractResponse")
	proto.RegisterType((*QueryGetAccountAllContractRequest)(nil), "liubaninc.m0.wasm.QueryGetAccountAllContractRequest")
	proto.RegisterType((*QueryGetAccountAllContractResponse)(nil), "liubaninc.m0.wasm.QueryGetAccountAllContractResponse")
	proto.RegisterType((*QueryAllContractRequest)(nil), "liubaninc.m0.wasm.QueryAllContractRequest")
	proto.RegisterType((*QueryAllContractResponse)(nil), "liubaninc.m0.wasm.QueryAllContractResponse")
}

func init() { proto.RegisterFile("wasm/query.proto", fileDescriptor_23bf88269acb91a9) }

var fileDescriptor_23bf88269acb91a9 = []byte{
	// 970 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x41, 0x6f, 0xdc, 0x44,
	0x14, 0x8e, 0xb3, 0x49, 0x76, 0x33, 0x05, 0x94, 0x0e, 0x48, 0x38, 0x6e, 0xba, 0x04, 0x37, 0x85,
	0x68, 0x01, 0x7b, 0x9b, 0x16, 0x21, 0x50, 0x85, 0xb4, 0x84, 0xb4, 0xea, 0x89, 0xc5, 0x88, 0x0b,
	0x97, 0x6a, 0xd6, 0x3b, 0x18, 0xab, 0x5e, 0x8f, 0xeb, 0x19, 0x07, 0x47, 0x51, 0x41, 0xe2, 0xca,
	0x01, 0x24, 0xae, 0x48, 0x5c, 0x10, 0x37, 0x24, 0x2e, 0xfc, 0x07, 0x8e, 0x95, 0xb8, 0x70, 0x44,
	0x09, 0x67, 0x7e, 0x03, 0xf2, 0xcc, 0xd8, 0xeb, 0xd9, 0xd8, 0xce, 0x6e, 0x14, 0xa4, 0x9e, 0xb2,
	0xe3, 0x79, 0xdf, 0x7b, 0xdf, 0xfb, 0xde, 0xcc, 0x7b, 0x13, 0xb0, 0xf1, 0x25, 0xa2, 0x13, 0xfb,
	0x71, 0x82, 0xe3, 0x23, 0x2b, 0x8a, 0x09, 0x23, 0xf0, 0x6a, 0xe0, 0x27, 0x23, 0x14, 0xfa, 0xa1,
	0x6b, 0x4d, 0xfa, 0x56, 0xb6, 0x6d, 0x6c, 0x79, 0x84, 0x78, 0x01, 0xb6, 0x51, 0xe4, 0xdb, 0x28,
	0x0c, 0x09, 0x43, 0xcc, 0x27, 0x21, 0x15, 0x00, 0xa3, 0xe7, 0x12, 0x3a, 0x21, 0xd4, 0x1e, 0x21,
	0x8a, 0x85, 0x27, 0xfb, 0xf0, 0xd6, 0x08, 0x33, 0x74, 0xcb, 0x8e, 0x90, 0xe7, 0x87, 0xdc, 0x58,
	0xda, 0x6e, 0xf2, 0x70, 0x28, 0x8a, 0x62, 0x72, 0x88, 0x1f, 0x8e, 0x71, 0x14, 0x90, 0x23, 0x65,
	0x2b, 0x8a, 0x49, 0x44, 0xe8, 0xcc, 0xd6, 0x0b, 0x7c, 0x0b, 0xa7, 0x4c, 0xae, 0x5f, 0xe4, 0x6b,
	0x97, 0x84, 0x2c, 0x46, 0x6e, 0xfe, 0x71, 0x23, 0x61, 0x29, 0xb1, 0xfd, 0x30, 0x4a, 0x0a, 0xb3,
	0x74, 0x42, 0xc6, 0x38, 0xb0, 0xc5, 0x1f, 0xf1, 0xd1, 0xbc, 0x03, 0xb6, 0x3e, 0xce, 0x38, 0xde,
	0xc7, 0x6c, 0x20, 0x68, 0x7c, 0xc8, 0x43, 0x39, 0xf8, 0x71, 0x82, 0x29, 0x83, 0x2f, 0x81, 0x55,
	0x3f, 0x1c, 0xe3, 0x54, 0xd7, 0xb6, 0xb5, 0xdd, 0x75, 0x47, 0x2c, 0x4c, 0x0f, 0x5c, 0xaf, 0x41,
	0xd1, 0x88, 0x84, 0x14, 0xc3, 0x7b, 0xe0, 0x79, 0x65, 0x83, 0xc3, 0xaf, 0xec, 0x6d, 0x5b, 0x67,
	0xd4, 0xb4, 0x54, 0x07, 0x2a, 0xcc, 0xfc, 0x5c, 0xd2, 0x1b, 0x04, 0x41, 0x25, 0xbd, 0x7b, 0x00,
	0x4c, 0x45, 0x95, 0x41, 0x5e, 0xb3, 0x44, 0x05, 0xac, 0xac, 0x02, 0x96, 0xa8, 0xa5, 0xac, 0x80,
	0x35, 0x44, 0x1e, 0x96, 0x58, 0xa7, 0x84, 0x34, 0x7f, 0xd3, 0x64, 0x46, 0x67, 0x03, 0xd5, 0x67,
	0xd4, 0xba, 0x40, 0x46, 0xf0, 0xbe, 0xc2, 0x78, 0x99, 0x33, 0x7e, 0xfd, 0x5c, 0xc6, 0x82, 0x84,
	0x42, 0xb9, 0x54, 0xb9, 0xa1, 0x38, 0x25, 0x0b, 0x56, 0x6e, 0x06, 0x35, 0xcd, 0x53, 0xd9, 0x68,
	0xa8, 0x9c, 0xea, 0x40, 0x85, 0x95, 0x2b, 0x57, 0x49, 0xef, 0xff, 0xa8, 0xdc, 0xdc, 0x19, 0xb5,
	0x2e, 0x90, 0xd1, 0xe5, 0x55, 0xee, 0x2b, 0xb0, 0xf1, 0x20, 0x3c, 0x24, 0x8f, 0xb0, 0x33, 0xdc,
	0xcf, 0xe5, 0xd0, 0x41, 0xdb, 0x8d, 0x31, 0x62, 0x24, 0x96, 0xf5, 0xca, 0x97, 0x10, 0x82, 0x95,
	0x80, 0xb8, 0x8f, 0x78, 0xc0, 0x96, 0xc3, 0x7f, 0xc3, 0xbb, 0xa0, 0x13, 0x0b, 0x20, 0xd5, 0x5b,
	0xb5, 0xd9, 0xc8, 0x20, 0x52, 0xb4, 0x02, 0x61, 0xfe, 0xda, 0x02, 0x57, 0x4b, 0x04, 0xa4, 0x4c,
	0x7d, 0xb0, 0xc6, 0xbb, 0x05, 0x95, 0xfa, 0xe8, 0xaa, 0xc7, 0xac, 0x9d, 0x58, 0x0f, 0x32, 0x03,
	0x47, 0xda, 0xc1, 0xdb, 0xa0, 0x4d, 0x12, 0xc6, 0x21, 0xcb, 0x1c, 0xb2, 0x59, 0x01, 0xf9, 0x88,
	0x5b, 0x38, 0xb9, 0x25, 0x7c, 0x17, 0xac, 0x0b, 0xf8, 0x41, 0xca, 0x24, 0xf7, 0x6b, 0x95, 0xdc,
	0xa3, 0x84, 0x1d, 0xa4, 0xcc, 0x99, 0x5a, 0xc3, 0xbb, 0x00, 0x48, 0x2f, 0x19, 0x76, 0x85, 0x63,
	0xb7, 0x2a, 0xb0, 0x22, 0x64, 0x06, 0x2e, 0xd9, 0x43, 0x23, 0xd3, 0x4c, 0xe4, 0xaa, 0xaf, 0x6e,
	0xb7, 0x76, 0x9f, 0x73, 0x8a, 0x35, 0xdc, 0x04, 0x1d, 0x0f, 0xd1, 0x87, 0x09, 0xc5, 0x63, 0x7d,
	0x8d, 0xeb, 0xdc, 0xf6, 0x10, 0xfd, 0x94, 0xe2, 0xb1, 0x22, 0x75, 0x7b, 0x51, 0xa9, 0xe1, 0x3e,
	0x58, 0xcf, 0x83, 0x50, 0xbd, 0xc3, 0xe1, 0x37, 0x55, 0xb8, 0xec, 0xc6, 0xfb, 0xb2, 0x7b, 0x17,
	0x07, 0x66, 0x8a, 0x33, 0xdf, 0x02, 0x2f, 0xe7, 0x77, 0x76, 0x6a, 0x26, 0x8e, 0x0d, 0x04, 0x2b,
	0x21, 0x9a, 0x60, 0x79, 0x66, 0xf8, 0x6f, 0xf3, 0x13, 0xa0, 0x9f, 0x35, 0x97, 0x89, 0xbe, 0x03,
	0x3a, 0xf9, 0x9c, 0x90, 0x77, 0xae, 0x4a, 0xfc, 0x02, 0x56, 0x18, 0x9b, 0x5f, 0x83, 0x57, 0x8b,
	0x8e, 0xef, 0xba, 0x24, 0x09, 0xd9, 0x20, 0x08, 0xe6, 0x60, 0x33, 0x73, 0xcf, 0x97, 0x2f, 0x7c,
	0xcf, 0x7f, 0xd1, 0x80, 0xd9, 0xc4, 0xa0, 0x32, 0xc1, 0xd6, 0xdc, 0x09, 0x5e, 0xde, 0xed, 0x46,
	0xb2, 0x5a, 0x15, 0xfa, 0x5c, 0x56, 0xcf, 0xfb, 0x51, 0x93, 0x25, 0x7e, 0x26, 0x15, 0xd8, 0xfb,
	0x77, 0x1d, 0xac, 0x72, 0x7a, 0xf0, 0x67, 0x6d, 0x66, 0x6a, 0x42, 0xbb, 0x82, 0x4b, 0xd3, 0x03,
	0xc4, 0xe8, 0xcf, 0x0f, 0x10, 0x54, 0xcc, 0xfe, 0x37, 0x7f, 0xfe, 0xf3, 0xc3, 0x72, 0x0f, 0xee,
	0xda, 0x05, 0xd2, 0x9e, 0xf4, 0xed, 0xf2, 0x53, 0x4b, 0x20, 0xec, 0x63, 0x3e, 0x13, 0x9f, 0xc0,
	0x9f, 0x34, 0xb0, 0xa1, 0xf8, 0x1a, 0x04, 0x41, 0x3d, 0xd3, 0x9a, 0xb7, 0x48, 0x3d, 0xd3, 0xba,
	0x37, 0x85, 0xb9, 0xcb, 0x99, 0x9a, 0x70, 0xfb, 0x3c, 0xa6, 0x5c, 0x48, 0x75, 0x1a, 0x35, 0x09,
	0x59, 0x35, 0x70, 0x1b, 0x85, 0xac, 0x1c, 0x9c, 0x8d, 0x42, 0x46, 0x65, 0x84, 0x22, 0xa4, 0xe2,
	0xeb, 0x3c, 0x21, 0x17, 0x63, 0x5a, 0x37, 0xe2, 0x1b, 0x85, 0x54, 0x98, 0xc2, 0x63, 0xd0, 0x1e,
	0xc6, 0xf8, 0x20, 0xc5, 0x2e, 0xbc, 0x51, 0xdf, 0xc7, 0x8b, 0xb9, 0x6c, 0xec, 0x34, 0x1b, 0xc9,
	0xf8, 0x37, 0x79, 0xfc, 0x57, 0x4c, 0xa3, 0x32, 0x3e, 0xc6, 0x29, 0x76, 0xdf, 0xd3, 0x7a, 0xf0,
	0x3b, 0x0d, 0x74, 0xf2, 0x8b, 0x07, 0x7b, 0x0d, 0xf5, 0x98, 0x69, 0x1c, 0xc6, 0x1b, 0x73, 0xd9,
	0x4a, 0x32, 0x3d, 0x4e, 0x66, 0x07, 0x9a, 0x15, 0x64, 0xf2, 0xcb, 0x6e, 0x1f, 0x67, 0xcd, 0xf9,
	0x09, 0xfc, 0x56, 0x03, 0x57, 0x72, 0x07, 0x59, 0xad, 0x7a, 0x0d, 0xd2, 0xcf, 0x4d, 0xaa, 0xa2,
	0x2b, 0x99, 0x37, 0x38, 0xa9, 0xeb, 0xf0, 0x5a, 0x03, 0x29, 0xf8, 0xbb, 0x06, 0xa0, 0xec, 0xed,
	0x65, 0x52, 0x77, 0x9a, 0x5a, 0x40, 0xdd, 0x30, 0x32, 0xde, 0x5e, 0x10, 0x25, 0x89, 0xee, 0x71,
	0xa2, 0x6f, 0xc2, 0x5e, 0x93, 0x7a, 0x48, 0xe0, 0xa5, 0x8a, 0x1f, 0xbc, 0xff, 0xc7, 0x49, 0x57,
	0x7b, 0x7a, 0xd2, 0xd5, 0xfe, 0x3e, 0xe9, 0x6a, 0xdf, 0x9f, 0x76, 0x97, 0x9e, 0x9e, 0x76, 0x97,
	0xfe, 0x3a, 0xed, 0x2e, 0x7d, 0xb6, 0xe3, 0xf9, 0xec, 0x8b, 0x64, 0x64, 0xb9, 0x64, 0xa2, 0xfa,
	0x4b, 0x85, 0x47, 0x76, 0x14, 0x61, 0x3a, 0x5a, 0xe3, 0xff, 0x8b, 0xdd, 0xfe, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0x4c, 0xa1, 0x82, 0x92, 0x7e, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a approveDeploy by index.
	ApproveDeploy(ctx context.Context, in *QueryGetApproveDeployRequest, opts ...grpc.CallOption) (*QueryGetApproveDeployResponse, error)
	// Queries a list of approveDeploy items.
	ApproveDeployAll(ctx context.Context, in *QueryAllApproveDeployRequest, opts ...grpc.CallOption) (*QueryAllApproveDeployResponse, error)
	// Queries a proposeDeploy by index.
	ProposeDeploy(ctx context.Context, in *QueryGetProposeDeployRequest, opts ...grpc.CallOption) (*QueryGetProposeDeployResponse, error)
	// Queries a list of proposeDeploy items.
	ProposeDeployAll(ctx context.Context, in *QueryAllProposeDeployRequest, opts ...grpc.CallOption) (*QueryAllProposeDeployResponse, error)
	//预执行合约
	PreExec(ctx context.Context, in *InvokeRPCRequest, opts ...grpc.CallOption) (*InvokeRPCResponse, error)
	Contract(ctx context.Context, in *QueryGetContractRequest, opts ...grpc.CallOption) (*QueryGetContractResponse, error)
	ContractAll(ctx context.Context, in *QueryAllContractRequest, opts ...grpc.CallOption) (*QueryAllContractResponse, error)
	AccountContractAll(ctx context.Context, in *QueryGetAccountAllContractRequest, opts ...grpc.CallOption) (*QueryGetAccountAllContractResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ApproveDeploy(ctx context.Context, in *QueryGetApproveDeployRequest, opts ...grpc.CallOption) (*QueryGetApproveDeployResponse, error) {
	out := new(QueryGetApproveDeployResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.wasm.Query/ApproveDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApproveDeployAll(ctx context.Context, in *QueryAllApproveDeployRequest, opts ...grpc.CallOption) (*QueryAllApproveDeployResponse, error) {
	out := new(QueryAllApproveDeployResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.wasm.Query/ApproveDeployAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposeDeploy(ctx context.Context, in *QueryGetProposeDeployRequest, opts ...grpc.CallOption) (*QueryGetProposeDeployResponse, error) {
	out := new(QueryGetProposeDeployResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.wasm.Query/ProposeDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposeDeployAll(ctx context.Context, in *QueryAllProposeDeployRequest, opts ...grpc.CallOption) (*QueryAllProposeDeployResponse, error) {
	out := new(QueryAllProposeDeployResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.wasm.Query/ProposeDeployAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PreExec(ctx context.Context, in *InvokeRPCRequest, opts ...grpc.CallOption) (*InvokeRPCResponse, error) {
	out := new(InvokeRPCResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.wasm.Query/PreExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Contract(ctx context.Context, in *QueryGetContractRequest, opts ...grpc.CallOption) (*QueryGetContractResponse, error) {
	out := new(QueryGetContractResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.wasm.Query/Contract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractAll(ctx context.Context, in *QueryAllContractRequest, opts ...grpc.CallOption) (*QueryAllContractResponse, error) {
	out := new(QueryAllContractResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.wasm.Query/ContractAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountContractAll(ctx context.Context, in *QueryGetAccountAllContractRequest, opts ...grpc.CallOption) (*QueryGetAccountAllContractResponse, error) {
	out := new(QueryGetAccountAllContractResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.wasm.Query/AccountContractAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a approveDeploy by index.
	ApproveDeploy(context.Context, *QueryGetApproveDeployRequest) (*QueryGetApproveDeployResponse, error)
	// Queries a list of approveDeploy items.
	ApproveDeployAll(context.Context, *QueryAllApproveDeployRequest) (*QueryAllApproveDeployResponse, error)
	// Queries a proposeDeploy by index.
	ProposeDeploy(context.Context, *QueryGetProposeDeployRequest) (*QueryGetProposeDeployResponse, error)
	// Queries a list of proposeDeploy items.
	ProposeDeployAll(context.Context, *QueryAllProposeDeployRequest) (*QueryAllProposeDeployResponse, error)
	//预执行合约
	PreExec(context.Context, *InvokeRPCRequest) (*InvokeRPCResponse, error)
	Contract(context.Context, *QueryGetContractRequest) (*QueryGetContractResponse, error)
	ContractAll(context.Context, *QueryAllContractRequest) (*QueryAllContractResponse, error)
	AccountContractAll(context.Context, *QueryGetAccountAllContractRequest) (*QueryGetAccountAllContractResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ApproveDeploy(ctx context.Context, req *QueryGetApproveDeployRequest) (*QueryGetApproveDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveDeploy not implemented")
}
func (*UnimplementedQueryServer) ApproveDeployAll(ctx context.Context, req *QueryAllApproveDeployRequest) (*QueryAllApproveDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveDeployAll not implemented")
}
func (*UnimplementedQueryServer) ProposeDeploy(ctx context.Context, req *QueryGetProposeDeployRequest) (*QueryGetProposeDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeDeploy not implemented")
}
func (*UnimplementedQueryServer) ProposeDeployAll(ctx context.Context, req *QueryAllProposeDeployRequest) (*QueryAllProposeDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeDeployAll not implemented")
}
func (*UnimplementedQueryServer) PreExec(ctx context.Context, req *InvokeRPCRequest) (*InvokeRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreExec not implemented")
}
func (*UnimplementedQueryServer) Contract(ctx context.Context, req *QueryGetContractRequest) (*QueryGetContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Contract not implemented")
}
func (*UnimplementedQueryServer) ContractAll(ctx context.Context, req *QueryAllContractRequest) (*QueryAllContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractAll not implemented")
}
func (*UnimplementedQueryServer) AccountContractAll(ctx context.Context, req *QueryGetAccountAllContractRequest) (*QueryGetAccountAllContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountContractAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ApproveDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApproveDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApproveDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.wasm.Query/ApproveDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApproveDeploy(ctx, req.(*QueryGetApproveDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApproveDeployAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllApproveDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApproveDeployAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.wasm.Query/ApproveDeployAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApproveDeployAll(ctx, req.(*QueryAllApproveDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposeDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProposeDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposeDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.wasm.Query/ProposeDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposeDeploy(ctx, req.(*QueryGetProposeDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposeDeployAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProposeDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposeDeployAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.wasm.Query/ProposeDeployAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposeDeployAll(ctx, req.(*QueryAllProposeDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PreExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PreExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.wasm.Query/PreExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PreExec(ctx, req.(*InvokeRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Contract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Contract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.wasm.Query/Contract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Contract(ctx, req.(*QueryGetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.wasm.Query/ContractAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractAll(ctx, req.(*QueryAllContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountContractAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountAllContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountContractAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.wasm.Query/AccountContractAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountContractAll(ctx, req.(*QueryGetAccountAllContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "liubaninc.m0.wasm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApproveDeploy",
			Handler:    _Query_ApproveDeploy_Handler,
		},
		{
			MethodName: "ApproveDeployAll",
			Handler:    _Query_ApproveDeployAll_Handler,
		},
		{
			MethodName: "ProposeDeploy",
			Handler:    _Query_ProposeDeploy_Handler,
		},
		{
			MethodName: "ProposeDeployAll",
			Handler:    _Query_ProposeDeployAll_Handler,
		},
		{
			MethodName: "PreExec",
			Handler:    _Query_PreExec_Handler,
		},
		{
			MethodName: "Contract",
			Handler:    _Query_Contract_Handler,
		},
		{
			MethodName: "ContractAll",
			Handler:    _Query_ContractAll_Handler,
		},
		{
			MethodName: "AccountContractAll",
			Handler:    _Query_AccountContractAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wasm/query.proto",
}

func (m *QueryGetApproveDeployRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApproveDeployRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApproveDeployRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApproveDeployResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApproveDeployResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApproveDeployResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApproveDeploy != nil {
		{
			size, err := m.ApproveDeploy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllApproveDeployRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllApproveDeployRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllApproveDeployRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllApproveDeployResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllApproveDeployResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllApproveDeployResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApproveDeploy) > 0 {
		for iNdEx := len(m.ApproveDeploy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApproveDeploy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProposeDeployRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProposeDeployRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProposeDeployRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProposeDeployResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProposeDeployResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProposeDeployResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposeDeploy != nil {
		{
			size, err := m.ProposeDeploy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProposeDeployRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProposeDeployRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProposeDeployRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProposeDeployResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProposeDeployResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProposeDeployResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposeDeploy) > 0 {
		for iNdEx := len(m.ProposeDeploy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProposeDeploy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InvokeRPCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvokeRPCRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvokeRPCRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Lock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Lock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvokeRPCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvokeRPCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvokeRPCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.GasUsed != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Response[iNdEx])
			copy(dAtA[i:], m.Response[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Response[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.OutputsExt) > 0 {
		for iNdEx := len(m.OutputsExt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutputsExt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.InputsExt) > 0 {
		for iNdEx := len(m.InputsExt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InputsExt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Contract != nil {
		{
			size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountAllContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountAllContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountAllContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountAllContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountAllContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountAllContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		for iNdEx := len(m.Contract) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contract[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		for iNdEx := len(m.Contract) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contract[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetApproveDeployRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApproveDeployResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApproveDeploy != nil {
		l = m.ApproveDeploy.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllApproveDeployRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllApproveDeployResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApproveDeploy) > 0 {
		for _, e := range m.ApproveDeploy {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProposeDeployRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProposeDeployResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposeDeploy != nil {
		l = m.ProposeDeploy.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProposeDeployRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProposeDeployResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProposeDeploy) > 0 {
		for _, e := range m.ProposeDeploy {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *InvokeRPCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Lock != 0 {
		n += 1 + sovQuery(uint64(m.Lock))
	}
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *InvokeRPCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.InputsExt) > 0 {
		for _, e := range m.InputsExt {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.OutputsExt) > 0 {
		for _, e := range m.OutputsExt {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Response) > 0 {
		for _, b := range m.Response {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.GasUsed != 0 {
		n += 1 + sovQuery(uint64(m.GasUsed))
	}
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contract != nil {
		l = m.Contract.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountAllContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountAllContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contract) > 0 {
		for _, e := range m.Contract {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contract) > 0 {
		for _, e := range m.Contract {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetApproveDeployRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApproveDeployRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApproveDeployRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApproveDeployResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApproveDeployResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApproveDeployResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveDeploy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApproveDeploy == nil {
				m.ApproveDeploy = &ApproveDeploy{}
			}
			if err := m.ApproveDeploy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllApproveDeployRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllApproveDeployRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllApproveDeployRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllApproveDeployResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllApproveDeployResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllApproveDeployResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveDeploy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproveDeploy = append(m.ApproveDeploy, &ApproveDeploy{})
			if err := m.ApproveDeploy[len(m.ApproveDeploy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProposeDeployRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProposeDeployRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProposeDeployRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProposeDeployResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProposeDeployResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProposeDeployResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposeDeploy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposeDeploy == nil {
				m.ProposeDeploy = &ProposeDeploy{}
			}
			if err := m.ProposeDeploy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProposeDeployRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProposeDeployRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProposeDeployRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProposeDeployResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProposeDeployResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProposeDeployResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposeDeploy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposeDeploy = append(m.ProposeDeploy, &ProposeDeploy{})
			if err := m.ProposeDeploy[len(m.ProposeDeploy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvokeRPCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvokeRPCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvokeRPCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			m.Lock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &InvokeRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvokeRPCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvokeRPCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvokeRPCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &types.Input{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &types.Output{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputsExt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputsExt = append(m.InputsExt, &InputExt{})
			if err := m.InputsExt[len(m.InputsExt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputsExt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputsExt = append(m.OutputsExt, &OutputExt{})
			if err := m.OutputsExt[len(m.OutputsExt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, make([]byte, postIndex-iNdEx))
			copy(m.Response[len(m.Response)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &InvokeRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &xmodel.ContractResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract == nil {
				m.Contract = &Contract{}
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountAllContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountAllContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountAllContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountAllContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountAllContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountAllContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = append(m.Contract, &Contract{})
			if err := m.Contract[len(m.Contract)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = append(m.Contract, &Contract{})
			if err := m.Contract[len(m.Contract)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
