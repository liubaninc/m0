// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wasm/propose_deploy.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProposeDeploy struct {
	Creator          string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index            string   `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	ContractName     string   `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName,omitempty"`
	ContractCodeHash []byte   `protobuf:"bytes,4,opt,name=contractCodeHash,proto3" json:"contractCodeHash,omitempty"`
	InitArgs         string   `protobuf:"bytes,5,opt,name=initArgs,proto3" json:"initArgs,omitempty"`
	Approval         []string `protobuf:"bytes,6,rep,name=approval,proto3" json:"approval,omitempty"`
	Approved         []string `protobuf:"bytes,7,rep,name=approved,proto3" json:"approved,omitempty"`
}

func (m *ProposeDeploy) Reset()         { *m = ProposeDeploy{} }
func (m *ProposeDeploy) String() string { return proto.CompactTextString(m) }
func (*ProposeDeploy) ProtoMessage()    {}
func (*ProposeDeploy) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f9b30f57254760c, []int{0}
}
func (m *ProposeDeploy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposeDeploy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposeDeploy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposeDeploy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeDeploy.Merge(m, src)
}
func (m *ProposeDeploy) XXX_Size() int {
	return m.Size()
}
func (m *ProposeDeploy) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeDeploy.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeDeploy proto.InternalMessageInfo

func (m *ProposeDeploy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ProposeDeploy) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ProposeDeploy) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *ProposeDeploy) GetContractCodeHash() []byte {
	if m != nil {
		return m.ContractCodeHash
	}
	return nil
}

func (m *ProposeDeploy) GetInitArgs() string {
	if m != nil {
		return m.InitArgs
	}
	return ""
}

func (m *ProposeDeploy) GetApproval() []string {
	if m != nil {
		return m.Approval
	}
	return nil
}

func (m *ProposeDeploy) GetApproved() []string {
	if m != nil {
		return m.Approved
	}
	return nil
}

func init() {
	proto.RegisterType((*ProposeDeploy)(nil), "liubaninc.m0.wasm.ProposeDeploy")
}

func init() { proto.RegisterFile("wasm/propose_deploy.proto", fileDescriptor_8f9b30f57254760c) }

var fileDescriptor_8f9b30f57254760c = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x6b, 0x4a, 0x5b, 0xb0, 0x8a, 0x04, 0x56, 0x07, 0xd3, 0xc1, 0x8a, 0x2a, 0x86, 0x8a,
	0x21, 0xae, 0xc4, 0x8e, 0xc4, 0xcf, 0xc0, 0x84, 0x50, 0x47, 0x16, 0xe4, 0x24, 0x56, 0x6a, 0x29,
	0xf1, 0xb5, 0x6c, 0x17, 0xda, 0xb7, 0xe0, 0xb1, 0x18, 0x3b, 0x32, 0xa2, 0xe4, 0x45, 0x50, 0x1c,
	0xa5, 0x80, 0xd8, 0xee, 0x77, 0xbe, 0xab, 0x33, 0x1c, 0x7c, 0xfe, 0x26, 0x5c, 0xc9, 0x8d, 0x05,
	0x03, 0x4e, 0xbe, 0x64, 0xd2, 0x14, 0xb0, 0x8d, 0x8d, 0x05, 0x0f, 0xe4, 0xac, 0x50, 0xeb, 0x44,
	0x68, 0xa5, 0xd3, 0xb8, 0x5c, 0xc4, 0xcd, 0xdf, 0x74, 0x92, 0x43, 0x0e, 0xc1, 0xf2, 0xe6, 0x6a,
	0x1f, 0x67, 0x35, 0xc2, 0x27, 0x4f, 0x6d, 0xc3, 0x7d, 0x28, 0x20, 0x14, 0x8f, 0x52, 0x2b, 0x85,
	0x07, 0x4b, 0x51, 0x84, 0xe6, 0xc7, 0xcb, 0x0e, 0xc9, 0x04, 0x0f, 0x94, 0xce, 0xe4, 0x86, 0x1e,
	0x84, 0xbc, 0x05, 0x32, 0xc3, 0xe3, 0x14, 0xb4, 0xb7, 0x22, 0xf5, 0x8f, 0xa2, 0x94, 0xb4, 0x1f,
	0xe4, 0x9f, 0x8c, 0x5c, 0xe2, 0xd3, 0x8e, 0xef, 0x20, 0x93, 0x0f, 0xc2, 0xad, 0xe8, 0x61, 0x84,
	0xe6, 0xe3, 0xe5, 0xbf, 0x9c, 0x4c, 0xf1, 0x91, 0xd2, 0xca, 0xdf, 0xd8, 0xdc, 0xd1, 0x41, 0xe8,
	0xda, 0x73, 0xe3, 0x84, 0x31, 0x16, 0x5e, 0x45, 0x41, 0x87, 0x51, 0xbf, 0x71, 0x1d, 0xff, 0x38,
	0x99, 0xd1, 0xd1, 0x6f, 0x27, 0xb3, 0xdb, 0xeb, 0x8f, 0x8a, 0xa1, 0x5d, 0xc5, 0xd0, 0x57, 0xc5,
	0xd0, 0x7b, 0xcd, 0x7a, 0xbb, 0x9a, 0xf5, 0x3e, 0x6b, 0xd6, 0x7b, 0xbe, 0xc8, 0x95, 0x5f, 0xad,
	0x93, 0x38, 0x85, 0x92, 0xef, 0x37, 0xe3, 0xe5, 0x82, 0x6f, 0x78, 0x58, 0xd7, 0x6f, 0x8d, 0x74,
	0xc9, 0x30, 0x8c, 0x75, 0xf5, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x37, 0x28, 0x0d, 0x72, 0x01,
	0x00, 0x00,
}

func (m *ProposeDeploy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposeDeploy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposeDeploy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Approved) > 0 {
		for iNdEx := len(m.Approved) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Approved[iNdEx])
			copy(dAtA[i:], m.Approved[iNdEx])
			i = encodeVarintProposeDeploy(dAtA, i, uint64(len(m.Approved[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Approval) > 0 {
		for iNdEx := len(m.Approval) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Approval[iNdEx])
			copy(dAtA[i:], m.Approval[iNdEx])
			i = encodeVarintProposeDeploy(dAtA, i, uint64(len(m.Approval[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.InitArgs) > 0 {
		i -= len(m.InitArgs)
		copy(dAtA[i:], m.InitArgs)
		i = encodeVarintProposeDeploy(dAtA, i, uint64(len(m.InitArgs)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContractCodeHash) > 0 {
		i -= len(m.ContractCodeHash)
		copy(dAtA[i:], m.ContractCodeHash)
		i = encodeVarintProposeDeploy(dAtA, i, uint64(len(m.ContractCodeHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintProposeDeploy(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintProposeDeploy(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintProposeDeploy(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposeDeploy(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposeDeploy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProposeDeploy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovProposeDeploy(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovProposeDeploy(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovProposeDeploy(uint64(l))
	}
	l = len(m.ContractCodeHash)
	if l > 0 {
		n += 1 + l + sovProposeDeploy(uint64(l))
	}
	l = len(m.InitArgs)
	if l > 0 {
		n += 1 + l + sovProposeDeploy(uint64(l))
	}
	if len(m.Approval) > 0 {
		for _, s := range m.Approval {
			l = len(s)
			n += 1 + l + sovProposeDeploy(uint64(l))
		}
	}
	if len(m.Approved) > 0 {
		for _, s := range m.Approved {
			l = len(s)
			n += 1 + l + sovProposeDeploy(uint64(l))
		}
	}
	return n
}

func sovProposeDeploy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposeDeploy(x uint64) (n int) {
	return sovProposeDeploy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposeDeploy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposeDeploy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposeDeploy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposeDeploy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposeDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposeDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposeDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCodeHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposeDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCodeHash = append(m.ContractCodeHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractCodeHash == nil {
				m.ContractCodeHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposeDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposeDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approval = append(m.Approval, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposeDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approved = append(m.Approved, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposeDeploy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposeDeploy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposeDeploy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposeDeploy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposeDeploy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposeDeploy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposeDeploy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposeDeploy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposeDeploy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposeDeploy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposeDeploy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposeDeploy = fmt.Errorf("proto: unexpected end of group")
)
