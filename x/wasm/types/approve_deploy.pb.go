// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: m0/wasm/approve_deploy.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApproveDeploy struct {
	Creator          string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index            string   `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	ContractName     string   `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName,omitempty"`
	ContractCodeHash []byte   `protobuf:"bytes,4,opt,name=contractCodeHash,proto3" json:"contractCodeHash,omitempty"`
	InitArgs         string   `protobuf:"bytes,5,opt,name=initArgs,proto3" json:"initArgs,omitempty"`
	Approval         []string `protobuf:"bytes,6,rep,name=approval,proto3" json:"approval,omitempty"`
}

func (m *ApproveDeploy) Reset()         { *m = ApproveDeploy{} }
func (m *ApproveDeploy) String() string { return proto.CompactTextString(m) }
func (*ApproveDeploy) ProtoMessage()    {}
func (*ApproveDeploy) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a03abac77c57263, []int{0}
}
func (m *ApproveDeploy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveDeploy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveDeploy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApproveDeploy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveDeploy.Merge(m, src)
}
func (m *ApproveDeploy) XXX_Size() int {
	return m.Size()
}
func (m *ApproveDeploy) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveDeploy.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveDeploy proto.InternalMessageInfo

func (m *ApproveDeploy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ApproveDeploy) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ApproveDeploy) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *ApproveDeploy) GetContractCodeHash() []byte {
	if m != nil {
		return m.ContractCodeHash
	}
	return nil
}

func (m *ApproveDeploy) GetInitArgs() string {
	if m != nil {
		return m.InitArgs
	}
	return ""
}

func (m *ApproveDeploy) GetApproval() []string {
	if m != nil {
		return m.Approval
	}
	return nil
}

func init() {
	proto.RegisterType((*ApproveDeploy)(nil), "liubaninc.m0.wasm.ApproveDeploy")
}

func init() { proto.RegisterFile("m0/wasm/approve_deploy.proto", fileDescriptor_9a03abac77c57263) }

var fileDescriptor_9a03abac77c57263 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0x17, 0xe7, 0xa6, 0x86, 0x09, 0x1a, 0x76, 0x08, 0x43, 0x42, 0x19, 0x1e, 0x86, 0x87,
	0xa6, 0xe0, 0x5d, 0x98, 0x7a, 0xf0, 0xe4, 0x61, 0x47, 0x2f, 0x92, 0xb6, 0xa1, 0x0b, 0x34, 0xfd,
	0x42, 0x9a, 0xe9, 0xf6, 0x2f, 0xfc, 0x57, 0x7a, 0xdc, 0xd1, 0xa3, 0xb4, 0x7f, 0x44, 0x9a, 0xd0,
	0x81, 0x78, 0xcb, 0xf3, 0x3e, 0x1f, 0x2f, 0xe4, 0xc5, 0x57, 0x3a, 0xe1, 0xef, 0xa2, 0xd6, 0x5c,
	0x18, 0x63, 0xe1, 0x4d, 0xbe, 0xe6, 0xd2, 0x94, 0xb0, 0x8b, 0x8d, 0x05, 0x07, 0xe4, 0xb2, 0x54,
	0x9b, 0x54, 0x54, 0xaa, 0xca, 0x62, 0x9d, 0xc4, 0xdd, 0xdd, 0x6c, 0x5a, 0x40, 0x01, 0xde, 0xf2,
	0xee, 0x15, 0x0e, 0xe7, 0x9f, 0x08, 0x9f, 0x2f, 0x43, 0xc3, 0xa3, 0x2f, 0x20, 0x14, 0x9f, 0x64,
	0x56, 0x0a, 0x07, 0x96, 0xa2, 0x08, 0x2d, 0xce, 0x56, 0x3d, 0x92, 0x29, 0x1e, 0xa9, 0x2a, 0x97,
	0x5b, 0x7a, 0xe4, 0xf3, 0x00, 0x64, 0x8e, 0x27, 0x19, 0x54, 0xce, 0x8a, 0xcc, 0x3d, 0x0b, 0x2d,
	0xe9, 0xd0, 0xcb, 0x3f, 0x19, 0xb9, 0xc1, 0x17, 0x3d, 0x3f, 0x40, 0x2e, 0x9f, 0x44, 0xbd, 0xa6,
	0xc7, 0x11, 0x5a, 0x4c, 0x56, 0xff, 0x72, 0x32, 0xc3, 0xa7, 0xaa, 0x52, 0x6e, 0x69, 0x8b, 0x9a,
	0x8e, 0x7c, 0xd7, 0x81, 0x3b, 0x17, 0xbe, 0x2b, 0x4a, 0x3a, 0x8e, 0x86, 0x9d, 0xeb, 0xf9, 0xfe,
	0xee, 0xab, 0x61, 0x68, 0xdf, 0x30, 0xf4, 0xd3, 0x30, 0xf4, 0xd1, 0xb2, 0xc1, 0xbe, 0x65, 0x83,
	0xef, 0x96, 0x0d, 0x5e, 0xae, 0x0b, 0xe5, 0xd6, 0x9b, 0x34, 0xce, 0x40, 0xf3, 0xc3, 0x2e, 0x5c,
	0x27, 0x7c, 0x1b, 0x16, 0x74, 0x3b, 0x23, 0xeb, 0x74, 0xec, 0x07, 0xb9, 0xfd, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0xa4, 0xe1, 0xb5, 0xc8, 0x59, 0x01, 0x00, 0x00,
}

func (m *ApproveDeploy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveDeploy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApproveDeploy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Approval) > 0 {
		for iNdEx := len(m.Approval) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Approval[iNdEx])
			copy(dAtA[i:], m.Approval[iNdEx])
			i = encodeVarintApproveDeploy(dAtA, i, uint64(len(m.Approval[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.InitArgs) > 0 {
		i -= len(m.InitArgs)
		copy(dAtA[i:], m.InitArgs)
		i = encodeVarintApproveDeploy(dAtA, i, uint64(len(m.InitArgs)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContractCodeHash) > 0 {
		i -= len(m.ContractCodeHash)
		copy(dAtA[i:], m.ContractCodeHash)
		i = encodeVarintApproveDeploy(dAtA, i, uint64(len(m.ContractCodeHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintApproveDeploy(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintApproveDeploy(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintApproveDeploy(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApproveDeploy(dAtA []byte, offset int, v uint64) int {
	offset -= sovApproveDeploy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApproveDeploy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovApproveDeploy(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovApproveDeploy(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovApproveDeploy(uint64(l))
	}
	l = len(m.ContractCodeHash)
	if l > 0 {
		n += 1 + l + sovApproveDeploy(uint64(l))
	}
	l = len(m.InitArgs)
	if l > 0 {
		n += 1 + l + sovApproveDeploy(uint64(l))
	}
	if len(m.Approval) > 0 {
		for _, s := range m.Approval {
			l = len(s)
			n += 1 + l + sovApproveDeploy(uint64(l))
		}
	}
	return n
}

func sovApproveDeploy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApproveDeploy(x uint64) (n int) {
	return sovApproveDeploy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApproveDeploy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApproveDeploy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveDeploy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveDeploy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApproveDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApproveDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApproveDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCodeHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApproveDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCodeHash = append(m.ContractCodeHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractCodeHash == nil {
				m.ContractCodeHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApproveDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApproveDeploy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approval = append(m.Approval, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApproveDeploy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApproveDeploy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApproveDeploy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApproveDeploy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApproveDeploy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApproveDeploy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApproveDeploy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApproveDeploy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApproveDeploy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApproveDeploy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApproveDeploy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApproveDeploy = fmt.Errorf("proto: unexpected end of group")
)
