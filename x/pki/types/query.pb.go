// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: m0/pki/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetCertificateRequest struct {
	Issuer       string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	SerialNumber string `protobuf:"bytes,2,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
}

func (m *QueryGetCertificateRequest) Reset()         { *m = QueryGetCertificateRequest{} }
func (m *QueryGetCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCertificateRequest) ProtoMessage()    {}
func (*QueryGetCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c0d848522a77f, []int{0}
}
func (m *QueryGetCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCertificateRequest.Merge(m, src)
}
func (m *QueryGetCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCertificateRequest proto.InternalMessageInfo

func (m *QueryGetCertificateRequest) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *QueryGetCertificateRequest) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

type QueryGetCertificateResponse struct {
	Certificate *Certificate `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate,omitempty"`
}

func (m *QueryGetCertificateResponse) Reset()         { *m = QueryGetCertificateResponse{} }
func (m *QueryGetCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCertificateResponse) ProtoMessage()    {}
func (*QueryGetCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c0d848522a77f, []int{1}
}
func (m *QueryGetCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCertificateResponse.Merge(m, src)
}
func (m *QueryGetCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCertificateResponse proto.InternalMessageInfo

func (m *QueryGetCertificateResponse) GetCertificate() *Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type QueryAllCertificateRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCertificateRequest) Reset()         { *m = QueryAllCertificateRequest{} }
func (m *QueryAllCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCertificateRequest) ProtoMessage()    {}
func (*QueryAllCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c0d848522a77f, []int{2}
}
func (m *QueryAllCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCertificateRequest.Merge(m, src)
}
func (m *QueryAllCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCertificateRequest proto.InternalMessageInfo

func (m *QueryAllCertificateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCertificateResponse struct {
	Certificate []*Certificate      `protobuf:"bytes,1,rep,name=Certificate,proto3" json:"Certificate,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCertificateResponse) Reset()         { *m = QueryAllCertificateResponse{} }
func (m *QueryAllCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCertificateResponse) ProtoMessage()    {}
func (*QueryAllCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c0d848522a77f, []int{3}
}
func (m *QueryAllCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCertificateResponse.Merge(m, src)
}
func (m *QueryAllCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCertificateResponse proto.InternalMessageInfo

func (m *QueryAllCertificateResponse) GetCertificate() []*Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *QueryAllCertificateResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCertificatesRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyID string `protobuf:"bytes,2,opt,name=subjectKeyID,proto3" json:"subjectKeyID,omitempty"`
}

func (m *QueryGetCertificatesRequest) Reset()         { *m = QueryGetCertificatesRequest{} }
func (m *QueryGetCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCertificatesRequest) ProtoMessage()    {}
func (*QueryGetCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c0d848522a77f, []int{4}
}
func (m *QueryGetCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCertificatesRequest.Merge(m, src)
}
func (m *QueryGetCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetCertificatesRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetCertificatesRequest) GetSubjectKeyID() string {
	if m != nil {
		return m.SubjectKeyID
	}
	return ""
}

type QueryGetCertificatesResponse struct {
	Certificates *Certificates `protobuf:"bytes,1,opt,name=Certificates,proto3" json:"Certificates,omitempty"`
}

func (m *QueryGetCertificatesResponse) Reset()         { *m = QueryGetCertificatesResponse{} }
func (m *QueryGetCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCertificatesResponse) ProtoMessage()    {}
func (*QueryGetCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c0d848522a77f, []int{5}
}
func (m *QueryGetCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCertificatesResponse.Merge(m, src)
}
func (m *QueryGetCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetCertificatesResponse) GetCertificates() *Certificates {
	if m != nil {
		return m.Certificates
	}
	return nil
}

type QueryAllCertificatesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCertificatesRequest) Reset()         { *m = QueryAllCertificatesRequest{} }
func (m *QueryAllCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCertificatesRequest) ProtoMessage()    {}
func (*QueryAllCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c0d848522a77f, []int{6}
}
func (m *QueryAllCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCertificatesRequest.Merge(m, src)
}
func (m *QueryAllCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCertificatesResponse struct {
	Certificates []*Certificates     `protobuf:"bytes,1,rep,name=Certificates,proto3" json:"Certificates,omitempty"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCertificatesResponse) Reset()         { *m = QueryAllCertificatesResponse{} }
func (m *QueryAllCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCertificatesResponse) ProtoMessage()    {}
func (*QueryAllCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c0d848522a77f, []int{7}
}
func (m *QueryAllCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCertificatesResponse.Merge(m, src)
}
func (m *QueryAllCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllCertificatesResponse) GetCertificates() []*Certificates {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *QueryAllCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRevokeCertificatesRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyID string `protobuf:"bytes,2,opt,name=subjectKeyID,proto3" json:"subjectKeyID,omitempty"`
}

func (m *QueryGetRevokeCertificatesRequest) Reset()         { *m = QueryGetRevokeCertificatesRequest{} }
func (m *QueryGetRevokeCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokeCertificatesRequest) ProtoMessage()    {}
func (*QueryGetRevokeCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c0d848522a77f, []int{8}
}
func (m *QueryGetRevokeCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokeCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokeCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokeCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokeCertificatesRequest.Merge(m, src)
}
func (m *QueryGetRevokeCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokeCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokeCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokeCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetRevokeCertificatesRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetRevokeCertificatesRequest) GetSubjectKeyID() string {
	if m != nil {
		return m.SubjectKeyID
	}
	return ""
}

type QueryGetRevokeCertificatesResponse struct {
	Certificates *Certificates `protobuf:"bytes,1,opt,name=Certificates,proto3" json:"Certificates,omitempty"`
}

func (m *QueryGetRevokeCertificatesResponse) Reset()         { *m = QueryGetRevokeCertificatesResponse{} }
func (m *QueryGetRevokeCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokeCertificatesResponse) ProtoMessage()    {}
func (*QueryGetRevokeCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c0d848522a77f, []int{9}
}
func (m *QueryGetRevokeCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokeCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokeCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokeCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokeCertificatesResponse.Merge(m, src)
}
func (m *QueryGetRevokeCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokeCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokeCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokeCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetRevokeCertificatesResponse) GetCertificates() *Certificates {
	if m != nil {
		return m.Certificates
	}
	return nil
}

type QueryAllRevokeCertificatesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRevokeCertificatesRequest) Reset()         { *m = QueryAllRevokeCertificatesRequest{} }
func (m *QueryAllRevokeCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRevokeCertificatesRequest) ProtoMessage()    {}
func (*QueryAllRevokeCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c0d848522a77f, []int{10}
}
func (m *QueryAllRevokeCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRevokeCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRevokeCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRevokeCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRevokeCertificatesRequest.Merge(m, src)
}
func (m *QueryAllRevokeCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRevokeCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRevokeCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRevokeCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllRevokeCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRevokeCertificatesResponse struct {
	Certificates []*Certificates     `protobuf:"bytes,1,rep,name=Certificates,proto3" json:"Certificates,omitempty"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRevokeCertificatesResponse) Reset()         { *m = QueryAllRevokeCertificatesResponse{} }
func (m *QueryAllRevokeCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRevokeCertificatesResponse) ProtoMessage()    {}
func (*QueryAllRevokeCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c0d848522a77f, []int{11}
}
func (m *QueryAllRevokeCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRevokeCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRevokeCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRevokeCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRevokeCertificatesResponse.Merge(m, src)
}
func (m *QueryAllRevokeCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRevokeCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRevokeCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRevokeCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllRevokeCertificatesResponse) GetCertificates() []*Certificates {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *QueryAllRevokeCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetCertificateRequest)(nil), "liubaninc.m0.pki.QueryGetCertificateRequest")
	proto.RegisterType((*QueryGetCertificateResponse)(nil), "liubaninc.m0.pki.QueryGetCertificateResponse")
	proto.RegisterType((*QueryAllCertificateRequest)(nil), "liubaninc.m0.pki.QueryAllCertificateRequest")
	proto.RegisterType((*QueryAllCertificateResponse)(nil), "liubaninc.m0.pki.QueryAllCertificateResponse")
	proto.RegisterType((*QueryGetCertificatesRequest)(nil), "liubaninc.m0.pki.QueryGetCertificatesRequest")
	proto.RegisterType((*QueryGetCertificatesResponse)(nil), "liubaninc.m0.pki.QueryGetCertificatesResponse")
	proto.RegisterType((*QueryAllCertificatesRequest)(nil), "liubaninc.m0.pki.QueryAllCertificatesRequest")
	proto.RegisterType((*QueryAllCertificatesResponse)(nil), "liubaninc.m0.pki.QueryAllCertificatesResponse")
	proto.RegisterType((*QueryGetRevokeCertificatesRequest)(nil), "liubaninc.m0.pki.QueryGetRevokeCertificatesRequest")
	proto.RegisterType((*QueryGetRevokeCertificatesResponse)(nil), "liubaninc.m0.pki.QueryGetRevokeCertificatesResponse")
	proto.RegisterType((*QueryAllRevokeCertificatesRequest)(nil), "liubaninc.m0.pki.QueryAllRevokeCertificatesRequest")
	proto.RegisterType((*QueryAllRevokeCertificatesResponse)(nil), "liubaninc.m0.pki.QueryAllRevokeCertificatesResponse")
}

func init() { proto.RegisterFile("m0/pki/query.proto", fileDescriptor_654c0d848522a77f) }

var fileDescriptor_654c0d848522a77f = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0x4d, 0x6b, 0x13, 0x41,
	0x18, 0xc7, 0x33, 0x29, 0x56, 0x9d, 0x16, 0x95, 0x01, 0x25, 0xc6, 0x76, 0xad, 0xa3, 0x46, 0x91,
	0xba, 0xd3, 0x36, 0x4a, 0xf1, 0x10, 0x42, 0xea, 0x4b, 0x11, 0x41, 0x34, 0x27, 0x51, 0x10, 0x76,
	0xd7, 0x31, 0x1d, 0xb3, 0xd9, 0xdd, 0xee, 0xec, 0x16, 0x43, 0xc8, 0xc5, 0x4f, 0x20, 0xea, 0xc1,
	0x6f, 0x20, 0x22, 0x88, 0x7e, 0x09, 0xf1, 0x58, 0xf0, 0xe2, 0x51, 0x12, 0x3f, 0x88, 0x64, 0x76,
	0x92, 0xee, 0x66, 0x5f, 0x9a, 0x40, 0x0e, 0xde, 0xb2, 0x33, 0xf3, 0x3c, 0xcf, 0xef, 0xff, 0x7f,
	0xe6, 0x25, 0x10, 0xb5, 0xd6, 0x88, 0xd3, 0x64, 0x64, 0xd7, 0xa7, 0x6e, 0x5b, 0x75, 0x5c, 0xdb,
	0xb3, 0xd1, 0x29, 0x93, 0xf9, 0xba, 0x66, 0x31, 0xcb, 0x50, 0x5b, 0x6b, 0xaa, 0xd3, 0x64, 0xc5,
	0xa5, 0x86, 0x6d, 0x37, 0x4c, 0x4a, 0x34, 0x87, 0x11, 0xcd, 0xb2, 0x6c, 0x4f, 0xf3, 0x98, 0x6d,
	0xf1, 0x60, 0x7d, 0xf1, 0x9a, 0x61, 0xf3, 0x96, 0xcd, 0x89, 0xae, 0x71, 0x1a, 0x24, 0x22, 0x7b,
	0xeb, 0x3a, 0xf5, 0xb4, 0x75, 0xe2, 0x68, 0x0d, 0x66, 0x89, 0xc5, 0x72, 0x6d, 0x41, 0xd6, 0x33,
	0xa8, 0xeb, 0xb1, 0x97, 0xcc, 0xd0, 0x3c, 0x2a, 0x67, 0xce, 0xc6, 0x67, 0x64, 0x01, 0xfc, 0x04,
	0x16, 0x1f, 0x0f, 0xd2, 0x6e, 0x53, 0xef, 0xf6, 0xc1, 0x6c, 0x9d, 0xee, 0xfa, 0x94, 0x7b, 0xe8,
	0x0c, 0x9c, 0x67, 0x9c, 0xfb, 0xd4, 0x2d, 0x80, 0x15, 0x70, 0xf5, 0x78, 0x5d, 0x7e, 0x21, 0x0c,
	0x17, 0x39, 0x75, 0x99, 0x66, 0x3e, 0xf4, 0x5b, 0x3a, 0x75, 0x0b, 0x79, 0x31, 0x1b, 0x19, 0xc3,
	0xcf, 0xe1, 0xb9, 0xc4, 0xcc, 0xdc, 0xb1, 0x2d, 0x4e, 0x51, 0x15, 0x2e, 0x84, 0x86, 0x45, 0xfe,
	0x85, 0x8d, 0x65, 0x75, 0xdc, 0x1f, 0x35, 0x1c, 0x1b, 0x8e, 0xc0, 0x2f, 0x24, 0x79, 0xcd, 0x34,
	0x13, 0xc8, 0xef, 0x41, 0x78, 0x60, 0x90, 0xcc, 0x5e, 0x52, 0x03, 0x37, 0xd5, 0x81, 0x9b, 0x6a,
	0xd0, 0x16, 0xe9, 0xa6, 0xfa, 0x48, 0x6b, 0x0c, 0x63, 0xeb, 0xa1, 0x48, 0xfc, 0x09, 0x48, 0x19,
	0xe3, 0x65, 0xd2, 0x64, 0xcc, 0x4d, 0x27, 0x03, 0x6d, 0x47, 0x40, 0xf3, 0x02, 0xf4, 0xca, 0xa1,
	0xa0, 0x41, 0xf5, 0x08, 0xe9, 0xb3, 0x44, 0xbf, 0xf9, 0xd0, 0x90, 0x02, 0x3c, 0xca, 0x7d, 0xfd,
	0x15, 0x35, 0x3c, 0xd9, 0xcb, 0xe1, 0xa7, 0x68, 0x66, 0xf0, 0xf3, 0x01, 0x6d, 0xdf, 0xbf, 0x33,
	0x6a, 0x66, 0x68, 0x0c, 0xeb, 0x70, 0x29, 0x39, 0xb9, 0xb4, 0x61, 0x0b, 0x2e, 0x86, 0xc7, 0xa5,
	0xe1, 0x4a, 0xa6, 0x0f, 0xbc, 0x1e, 0x89, 0xc1, 0x34, 0xd1, 0x69, 0x3e, 0xeb, 0x8e, 0x7e, 0x01,
	0x52, 0x4b, 0xac, 0x4e, 0xaa, 0x96, 0xb9, 0x69, 0xb5, 0xcc, 0xae, 0xab, 0x1a, 0xbc, 0x30, 0x34,
	0xbe, 0x4e, 0xf7, 0xec, 0x26, 0x9d, 0x7d, 0x6f, 0x77, 0x20, 0xce, 0x2a, 0x31, 0xc3, 0x0e, 0x37,
	0xa5, 0x98, 0x9a, 0x69, 0xa6, 0x8b, 0x99, 0x55, 0x9f, 0xbf, 0x03, 0xa9, 0x2b, 0xa5, 0xda, 0x7f,
	0xd8, 0xed, 0x8d, 0x77, 0xc7, 0xe0, 0x11, 0xc1, 0x8c, 0x3e, 0x83, 0xc8, 0xc5, 0x82, 0x56, 0xe3,
	0x40, 0xe9, 0xf7, 0x76, 0xf1, 0xfa, 0x84, 0xab, 0x03, 0x04, 0x5c, 0x79, 0xf3, 0xeb, 0xef, 0xfb,
	0xfc, 0x26, 0xba, 0x49, 0x46, 0x61, 0x24, 0xfe, 0x64, 0x90, 0x4e, 0x70, 0xfb, 0x77, 0x49, 0x27,
	0x7c, 0xd1, 0x77, 0xd1, 0x07, 0x00, 0x4f, 0x84, 0xd2, 0xd6, 0x4c, 0x33, 0x15, 0x37, 0xf1, 0xb2,
	0x4e, 0xc5, 0x4d, 0xbe, 0x73, 0xf1, 0x65, 0x81, 0x7b, 0x1e, 0x2d, 0x67, 0xe2, 0xa2, 0x1f, 0x00,
	0xa2, 0x78, 0xe3, 0x51, 0x39, 0xdd, 0x9b, 0xd4, 0x4d, 0x59, 0xbc, 0x31, 0x5d, 0x90, 0x04, 0xbd,
	0x2b, 0x40, 0xab, 0xa8, 0x12, 0x07, 0x75, 0x45, 0x54, 0xf8, 0x41, 0x26, 0x1d, 0x79, 0x2a, 0xbb,
	0xa3, 0x5f, 0xe2, 0x7c, 0x76, 0xd1, 0x37, 0x00, 0x4f, 0xc7, 0xab, 0x0c, 0x6c, 0x2e, 0xa7, 0x1b,
	0x37, 0xbd, 0x96, 0xcc, 0x73, 0x82, 0x57, 0x85, 0x96, 0x12, 0xba, 0x34, 0x89, 0x16, 0xf4, 0x15,
	0x44, 0x8f, 0x15, 0x9a, 0x6c, 0x47, 0x8e, 0x18, 0xd5, 0x49, 0x97, 0x4b, 0xba, 0xaa, 0xa0, 0xbb,
	0x85, 0x36, 0x33, 0xb7, 0x44, 0x86, 0xc7, 0x1f, 0x01, 0x3c, 0x39, 0xee, 0xee, 0x64, 0xdb, 0xf2,
	0x50, 0xe6, 0x94, 0x77, 0x06, 0x97, 0x04, 0xf3, 0x0a, 0x52, 0xb2, 0x99, 0xb7, 0x2a, 0x3f, 0x7b,
	0x0a, 0xd8, 0xef, 0x29, 0xe0, 0x4f, 0x4f, 0x01, 0x6f, 0xfb, 0x4a, 0x6e, 0xbf, 0xaf, 0xe4, 0x7e,
	0xf7, 0x95, 0xdc, 0xd3, 0x8b, 0x0d, 0xe6, 0xed, 0xf8, 0xba, 0x6a, 0xd8, 0xad, 0x68, 0x8e, 0xd7,
	0x22, 0x8b, 0xd7, 0x76, 0x28, 0xd7, 0xe7, 0xc5, 0x1f, 0xbd, 0xf2, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4a, 0x68, 0xb9, 0xe0, 0x8f, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a certificate by index.
	Certificate(ctx context.Context, in *QueryGetCertificateRequest, opts ...grpc.CallOption) (*QueryGetCertificateResponse, error)
	// Queries a list of certificate items.
	CertificateAll(ctx context.Context, in *QueryAllCertificateRequest, opts ...grpc.CallOption) (*QueryAllCertificateResponse, error)
	// Queries a certificates by index.
	RevokeCertificates(ctx context.Context, in *QueryGetRevokeCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokeCertificatesResponse, error)
	// Queries a list of certificates items.
	RevokeCertificatesAll(ctx context.Context, in *QueryAllRevokeCertificatesRequest, opts ...grpc.CallOption) (*QueryAllRevokeCertificatesResponse, error)
	// Queries a certificates by index.
	Certificates(ctx context.Context, in *QueryGetCertificatesRequest, opts ...grpc.CallOption) (*QueryGetCertificatesResponse, error)
	// Queries a list of certificates items.
	CertificatesAll(ctx context.Context, in *QueryAllCertificatesRequest, opts ...grpc.CallOption) (*QueryAllCertificatesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Certificate(ctx context.Context, in *QueryGetCertificateRequest, opts ...grpc.CallOption) (*QueryGetCertificateResponse, error) {
	out := new(QueryGetCertificateResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.pki.Query/Certificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CertificateAll(ctx context.Context, in *QueryAllCertificateRequest, opts ...grpc.CallOption) (*QueryAllCertificateResponse, error) {
	out := new(QueryAllCertificateResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.pki.Query/CertificateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokeCertificates(ctx context.Context, in *QueryGetRevokeCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokeCertificatesResponse, error) {
	out := new(QueryGetRevokeCertificatesResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.pki.Query/RevokeCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokeCertificatesAll(ctx context.Context, in *QueryAllRevokeCertificatesRequest, opts ...grpc.CallOption) (*QueryAllRevokeCertificatesResponse, error) {
	out := new(QueryAllRevokeCertificatesResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.pki.Query/RevokeCertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Certificates(ctx context.Context, in *QueryGetCertificatesRequest, opts ...grpc.CallOption) (*QueryGetCertificatesResponse, error) {
	out := new(QueryGetCertificatesResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.pki.Query/Certificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CertificatesAll(ctx context.Context, in *QueryAllCertificatesRequest, opts ...grpc.CallOption) (*QueryAllCertificatesResponse, error) {
	out := new(QueryAllCertificatesResponse)
	err := c.cc.Invoke(ctx, "/liubaninc.m0.pki.Query/CertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a certificate by index.
	Certificate(context.Context, *QueryGetCertificateRequest) (*QueryGetCertificateResponse, error)
	// Queries a list of certificate items.
	CertificateAll(context.Context, *QueryAllCertificateRequest) (*QueryAllCertificateResponse, error)
	// Queries a certificates by index.
	RevokeCertificates(context.Context, *QueryGetRevokeCertificatesRequest) (*QueryGetRevokeCertificatesResponse, error)
	// Queries a list of certificates items.
	RevokeCertificatesAll(context.Context, *QueryAllRevokeCertificatesRequest) (*QueryAllRevokeCertificatesResponse, error)
	// Queries a certificates by index.
	Certificates(context.Context, *QueryGetCertificatesRequest) (*QueryGetCertificatesResponse, error)
	// Queries a list of certificates items.
	CertificatesAll(context.Context, *QueryAllCertificatesRequest) (*QueryAllCertificatesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Certificate(ctx context.Context, req *QueryGetCertificateRequest) (*QueryGetCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Certificate not implemented")
}
func (*UnimplementedQueryServer) CertificateAll(ctx context.Context, req *QueryAllCertificateRequest) (*QueryAllCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateAll not implemented")
}
func (*UnimplementedQueryServer) RevokeCertificates(ctx context.Context, req *QueryGetRevokeCertificatesRequest) (*QueryGetRevokeCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificates not implemented")
}
func (*UnimplementedQueryServer) RevokeCertificatesAll(ctx context.Context, req *QueryAllRevokeCertificatesRequest) (*QueryAllRevokeCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificatesAll not implemented")
}
func (*UnimplementedQueryServer) Certificates(ctx context.Context, req *QueryGetCertificatesRequest) (*QueryGetCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Certificates not implemented")
}
func (*UnimplementedQueryServer) CertificatesAll(ctx context.Context, req *QueryAllCertificatesRequest) (*QueryAllCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificatesAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Certificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Certificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.pki.Query/Certificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Certificate(ctx, req.(*QueryGetCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CertificateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CertificateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.pki.Query/CertificateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CertificateAll(ctx, req.(*QueryAllCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokeCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRevokeCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokeCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.pki.Query/RevokeCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokeCertificates(ctx, req.(*QueryGetRevokeCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokeCertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRevokeCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokeCertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.pki.Query/RevokeCertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokeCertificatesAll(ctx, req.(*QueryAllRevokeCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Certificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Certificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.pki.Query/Certificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Certificates(ctx, req.(*QueryGetCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liubaninc.m0.pki.Query/CertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CertificatesAll(ctx, req.(*QueryAllCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "liubaninc.m0.pki.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Certificate",
			Handler:    _Query_Certificate_Handler,
		},
		{
			MethodName: "CertificateAll",
			Handler:    _Query_CertificateAll_Handler,
		},
		{
			MethodName: "RevokeCertificates",
			Handler:    _Query_RevokeCertificates_Handler,
		},
		{
			MethodName: "RevokeCertificatesAll",
			Handler:    _Query_RevokeCertificatesAll_Handler,
		},
		{
			MethodName: "Certificates",
			Handler:    _Query_Certificates_Handler,
		},
		{
			MethodName: "CertificatesAll",
			Handler:    _Query_CertificatesAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "m0/pki/query.proto",
}

func (m *QueryGetCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SerialNumber) > 0 {
		i -= len(m.SerialNumber)
		copy(dAtA[i:], m.SerialNumber)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SerialNumber)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Certificate != nil {
		{
			size, err := m.Certificate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Certificate) > 0 {
		for iNdEx := len(m.Certificate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyID) > 0 {
		i -= len(m.SubjectKeyID)
		copy(dAtA[i:], m.SubjectKeyID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Certificates != nil {
		{
			size, err := m.Certificates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokeCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokeCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokeCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyID) > 0 {
		i -= len(m.SubjectKeyID)
		copy(dAtA[i:], m.SubjectKeyID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokeCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokeCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokeCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Certificates != nil {
		{
			size, err := m.Certificates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRevokeCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRevokeCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRevokeCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRevokeCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRevokeCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRevokeCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SerialNumber)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Certificate != nil {
		l = m.Certificate.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certificate) > 0 {
		for _, e := range m.Certificate {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Certificates != nil {
		l = m.Certificates.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRevokeCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRevokeCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Certificates != nil {
		l = m.Certificates.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRevokeCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRevokeCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Certificate == nil {
				m.Certificate = &Certificate{}
			}
			if err := m.Certificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = append(m.Certificate, &Certificate{})
			if err := m.Certificate[len(m.Certificate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Certificates == nil {
				m.Certificates = &Certificates{}
			}
			if err := m.Certificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &Certificates{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokeCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokeCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokeCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokeCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokeCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokeCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Certificates == nil {
				m.Certificates = &Certificates{}
			}
			if err := m.Certificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRevokeCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRevokeCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRevokeCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRevokeCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRevokeCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRevokeCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &Certificates{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
