syntax = "proto3";
package liubaninc.m0.blob;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "blob/comment.proto";
import "blob/blob.proto";

option go_package = "github.com/liubaninc/m0/x/blob/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2

	// Queries a comment by id.
	rpc Comment(QueryGetCommentRequest) returns (QueryGetCommentResponse) {
		option (google.api.http).get = "/liubaninc/m0/blob/comment/{id}";
	}

	// Queries a list of comment items.
	rpc CommentAll(QueryAllCommentRequest) returns (QueryAllCommentResponse) {
		option (google.api.http).get = "/liubaninc/m0/blob/comment";
	}


	// Queries a blob by id.
	rpc Blob(QueryGetBlobRequest) returns (QueryGetBlobResponse) {
		option (google.api.http).get = "/liubaninc/m0/blob/blob/{id}";
	}

	// Queries a list of blob items.
	rpc BlobAll(QueryAllBlobRequest) returns (QueryAllBlobResponse) {
		option (google.api.http).get = "/liubaninc/m0/blob/blob";
	}

}

// this line is used by starport scaffolding # 3
message QueryGetCommentRequest {
	uint64 id = 1;
}

message QueryGetCommentResponse {
	Comment Comment = 1;
}

message QueryAllCommentRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCommentResponse {
	repeated Comment Comment = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetBlobRequest {
	uint64 id = 1;
}

message QueryGetBlobResponse {
	Blob Blob = 1;
}

message QueryAllBlobRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBlobResponse {
	repeated Blob Blob = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
